   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mb_m.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.bss.ucMBMasterDestAddress,"aw",%nobits
  21              	ucMBMasterDestAddress:
  22 0000 00       		.space	1
  23              		.section	.bss.xMBRunInMasterMode,"aw",%nobits
  26              	xMBRunInMasterMode:
  27 0000 00       		.space	1
  28              		.section	.bss.eMBMasterCurErrorType,"aw",%nobits
  31              	eMBMasterCurErrorType:
  32 0000 00       		.space	1
  33              		.section	.data.eMBState,"aw",%progbits
  36              	eMBState:
  37 0000 02       		.byte	2
  38              		.section	.bss.peMBMasterFrameSendCur,"aw",%nobits
  39              		.align	2
  42              	peMBMasterFrameSendCur:
  43 0000 00000000 		.space	4
  44              		.section	.bss.pvMBMasterFrameStartCur,"aw",%nobits
  45              		.align	2
  48              	pvMBMasterFrameStartCur:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pvMBMasterFrameStopCur,"aw",%nobits
  51              		.align	2
  54              	pvMBMasterFrameStopCur:
  55 0000 00000000 		.space	4
  56              		.section	.bss.peMBMasterFrameReceiveCur,"aw",%nobits
  57              		.align	2
  60              	peMBMasterFrameReceiveCur:
  61 0000 00000000 		.space	4
  62              		.section	.bss.pvMBMasterFrameCloseCur,"aw",%nobits
  63              		.align	2
  66              	pvMBMasterFrameCloseCur:
  67 0000 00000000 		.space	4
  68              		.comm	pxMBMasterFrameCBByteReceived,4,4
  69              		.comm	pxMBMasterFrameCBTransmitterEmpty,4,4
  70              		.comm	pxMBMasterPortCBTimerExpired,4,4
  71              		.comm	pxMBMasterFrameCBReceiveFSMCur,4,4
  72              		.comm	pxMBMasterFrameCBTransmitFSMCur,4,4
  73              		.section	.data.xMasterFuncHandlers,"aw",%progbits
  74              		.align	2
  77              	xMasterFuncHandlers:
  78 0000 11       		.byte	17
  79 0001 000000   		.space	3
  80 0004 00000000 		.word	eMBFuncReportSlaveID
  81 0008 04       		.byte	4
  82 0009 000000   		.space	3
  83 000c 00000000 		.word	eMBMasterFuncReadInputRegister
  84 0010 03       		.byte	3
  85 0011 000000   		.space	3
  86 0014 00000000 		.word	eMBMasterFuncReadHoldingRegister
  87 0018 10       		.byte	16
  88 0019 000000   		.space	3
  89 001c 00000000 		.word	eMBMasterFuncWriteMultipleHoldingRegister
  90 0020 06       		.byte	6
  91 0021 000000   		.space	3
  92 0024 00000000 		.word	eMBMasterFuncWriteHoldingRegister
  93 0028 17       		.byte	23
  94 0029 000000   		.space	3
  95 002c 00000000 		.word	eMBMasterFuncReadWriteMultipleHoldingRegister
  96 0030 01       		.byte	1
  97 0031 000000   		.space	3
  98 0034 00000000 		.word	eMBMasterFuncReadCoils
  99 0038 05       		.byte	5
 100 0039 000000   		.space	3
 101 003c 00000000 		.word	eMBMasterFuncWriteCoil
 102 0040 0F       		.byte	15
 103 0041 000000   		.space	3
 104 0044 00000000 		.word	eMBMasterFuncWriteMultipleCoils
 105 0048 02       		.byte	2
 106 0049 000000   		.space	3
 107 004c 00000000 		.word	eMBMasterFuncReadDiscreteInputs
 108 0050 00000000 		.space	48
 108      00000000 
 108      00000000 
 108      00000000 
 108      00000000 
 109              		.section	.text.eMBMasterInit,"ax",%progbits
 110              		.align	2
 111              		.global	eMBMasterInit
 112              		.thumb
 113              		.thumb_func
 115              	eMBMasterInit:
 116              	.LFB29:
 117              		.file 1 "../FreeModbus/mb_m.c"
   1:../FreeModbus/mb_m.c **** /* 
   2:../FreeModbus/mb_m.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:../FreeModbus/mb_m.c ****  * Copyright (C) 2013 Armink <armink.ztl@gmail.com>
   4:../FreeModbus/mb_m.c ****  * All rights reserved.
   5:../FreeModbus/mb_m.c ****  *
   6:../FreeModbus/mb_m.c ****  * Redistribution and use in source and binary forms, with or without
   7:../FreeModbus/mb_m.c ****  * modification, are permitted provided that the following conditions
   8:../FreeModbus/mb_m.c ****  * are met:
   9:../FreeModbus/mb_m.c ****  * 1. Redistributions of source code must retain the above copyright
  10:../FreeModbus/mb_m.c ****  *    notice, this list of conditions and the following disclaimer.
  11:../FreeModbus/mb_m.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:../FreeModbus/mb_m.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:../FreeModbus/mb_m.c ****  *    documentation and/or other materials provided with the distribution.
  14:../FreeModbus/mb_m.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:../FreeModbus/mb_m.c ****  *    derived from this software without specific prior written permission.
  16:../FreeModbus/mb_m.c ****  *
  17:../FreeModbus/mb_m.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:../FreeModbus/mb_m.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:../FreeModbus/mb_m.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:../FreeModbus/mb_m.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:../FreeModbus/mb_m.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:../FreeModbus/mb_m.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:../FreeModbus/mb_m.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:../FreeModbus/mb_m.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:../FreeModbus/mb_m.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:../FreeModbus/mb_m.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:../FreeModbus/mb_m.c ****  *
  28:../FreeModbus/mb_m.c ****  * File: $Id: mbrtu_m.c,v 1.60 2013/08/20 11:18:10 Armink Add Master Functions $
  29:../FreeModbus/mb_m.c ****  */
  30:../FreeModbus/mb_m.c **** 
  31:../FreeModbus/mb_m.c **** /* ----------------------- System includes ----------------------------------*/
  32:../FreeModbus/mb_m.c **** #include "stdlib.h"
  33:../FreeModbus/mb_m.c **** #include "string.h"
  34:../FreeModbus/mb_m.c **** 
  35:../FreeModbus/mb_m.c **** /* ----------------------- Platform includes --------------------------------*/
  36:../FreeModbus/mb_m.c **** #include "port.h"
  37:../FreeModbus/mb_m.c **** 
  38:../FreeModbus/mb_m.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:../FreeModbus/mb_m.c **** 
  40:../FreeModbus/mb_m.c **** #include "mb.h"
  41:../FreeModbus/mb_m.c **** #include "mb_m.h"
  42:../FreeModbus/mb_m.c **** #include "mbconfig.h"
  43:../FreeModbus/mb_m.c **** #include "mbframe.h"
  44:../FreeModbus/mb_m.c **** #include "mbproto.h"
  45:../FreeModbus/mb_m.c **** #include "mbfunc.h"
  46:../FreeModbus/mb_m.c **** 
  47:../FreeModbus/mb_m.c **** #include "mbport.h"
  48:../FreeModbus/mb_m.c **** #if MB_MASTER_RTU_ENABLED == 1
  49:../FreeModbus/mb_m.c **** #include "mbrtu.h"
  50:../FreeModbus/mb_m.c **** #endif
  51:../FreeModbus/mb_m.c **** #if MB_MASTER_ASCII_ENABLED == 1
  52:../FreeModbus/mb_m.c **** #include "mbascii.h"
  53:../FreeModbus/mb_m.c **** #endif
  54:../FreeModbus/mb_m.c **** #if MB_MASTER_TCP_ENABLED == 1
  55:../FreeModbus/mb_m.c **** #include "mbtcp.h"
  56:../FreeModbus/mb_m.c **** #endif
  57:../FreeModbus/mb_m.c **** 
  58:../FreeModbus/mb_m.c **** #if MB_MASTER_RTU_ENABLED > 0 || MB_MASTER_ASCII_ENABLED > 0
  59:../FreeModbus/mb_m.c **** 
  60:../FreeModbus/mb_m.c **** #ifndef MB_PORT_HAS_CLOSE
  61:../FreeModbus/mb_m.c **** #define MB_PORT_HAS_CLOSE 0
  62:../FreeModbus/mb_m.c **** #endif
  63:../FreeModbus/mb_m.c **** 
  64:../FreeModbus/mb_m.c **** /* ----------------------- Static variables ---------------------------------*/
  65:../FreeModbus/mb_m.c **** 
  66:../FreeModbus/mb_m.c **** static UCHAR    ucMBMasterDestAddress;
  67:../FreeModbus/mb_m.c **** static BOOL     xMBRunInMasterMode = FALSE;
  68:../FreeModbus/mb_m.c **** static eMBMasterErrorEventType eMBMasterCurErrorType;
  69:../FreeModbus/mb_m.c **** 
  70:../FreeModbus/mb_m.c **** static enum
  71:../FreeModbus/mb_m.c **** {
  72:../FreeModbus/mb_m.c ****     STATE_ENABLED,
  73:../FreeModbus/mb_m.c ****     STATE_DISABLED,
  74:../FreeModbus/mb_m.c ****     STATE_NOT_INITIALIZED
  75:../FreeModbus/mb_m.c **** } eMBState = STATE_NOT_INITIALIZED;
  76:../FreeModbus/mb_m.c **** 
  77:../FreeModbus/mb_m.c **** /* Functions pointer which are initialized in eMBInit( ). Depending on the
  78:../FreeModbus/mb_m.c ****  * mode (RTU or ASCII) the are set to the correct implementations.
  79:../FreeModbus/mb_m.c ****  * Using for Modbus Master,Add by Armink 20130813
  80:../FreeModbus/mb_m.c ****  */
  81:../FreeModbus/mb_m.c **** static peMBFrameSend peMBMasterFrameSendCur;
  82:../FreeModbus/mb_m.c **** static pvMBFrameStart pvMBMasterFrameStartCur;
  83:../FreeModbus/mb_m.c **** static pvMBFrameStop pvMBMasterFrameStopCur;
  84:../FreeModbus/mb_m.c **** static peMBFrameReceive peMBMasterFrameReceiveCur;
  85:../FreeModbus/mb_m.c **** static pvMBFrameClose pvMBMasterFrameCloseCur;
  86:../FreeModbus/mb_m.c **** 
  87:../FreeModbus/mb_m.c **** /* Callback functions required by the porting layer. They are called when
  88:../FreeModbus/mb_m.c ****  * an external event has happend which includes a timeout or the reception
  89:../FreeModbus/mb_m.c ****  * or transmission of a character.
  90:../FreeModbus/mb_m.c ****  * Using for Modbus Master,Add by Armink 20130813
  91:../FreeModbus/mb_m.c ****  */
  92:../FreeModbus/mb_m.c **** BOOL( *pxMBMasterFrameCBByteReceived ) ( void );
  93:../FreeModbus/mb_m.c **** BOOL( *pxMBMasterFrameCBTransmitterEmpty ) ( void );
  94:../FreeModbus/mb_m.c **** BOOL( *pxMBMasterPortCBTimerExpired ) ( void );
  95:../FreeModbus/mb_m.c **** 
  96:../FreeModbus/mb_m.c **** BOOL( *pxMBMasterFrameCBReceiveFSMCur ) ( void );
  97:../FreeModbus/mb_m.c **** BOOL( *pxMBMasterFrameCBTransmitFSMCur ) ( void );
  98:../FreeModbus/mb_m.c **** 
  99:../FreeModbus/mb_m.c **** /* An array of Modbus functions handlers which associates Modbus function
 100:../FreeModbus/mb_m.c ****  * codes with implementing functions.
 101:../FreeModbus/mb_m.c ****  */
 102:../FreeModbus/mb_m.c **** static xMBFunctionHandler xMasterFuncHandlers[MB_FUNC_HANDLERS_MAX] = {
 103:../FreeModbus/mb_m.c **** #if MB_FUNC_OTHER_REP_SLAVEID_ENABLED > 0
 104:../FreeModbus/mb_m.c **** 	//TODO Add Master function define
 105:../FreeModbus/mb_m.c ****     {MB_FUNC_OTHER_REPORT_SLAVEID, eMBFuncReportSlaveID},
 106:../FreeModbus/mb_m.c **** #endif
 107:../FreeModbus/mb_m.c **** #if MB_FUNC_READ_INPUT_ENABLED > 0
 108:../FreeModbus/mb_m.c ****     {MB_FUNC_READ_INPUT_REGISTER, eMBMasterFuncReadInputRegister},
 109:../FreeModbus/mb_m.c **** #endif
 110:../FreeModbus/mb_m.c **** #if MB_FUNC_READ_HOLDING_ENABLED > 0
 111:../FreeModbus/mb_m.c ****     {MB_FUNC_READ_HOLDING_REGISTER, eMBMasterFuncReadHoldingRegister},
 112:../FreeModbus/mb_m.c **** #endif
 113:../FreeModbus/mb_m.c **** #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 114:../FreeModbus/mb_m.c ****     {MB_FUNC_WRITE_MULTIPLE_REGISTERS, eMBMasterFuncWriteMultipleHoldingRegister},
 115:../FreeModbus/mb_m.c **** #endif
 116:../FreeModbus/mb_m.c **** #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
 117:../FreeModbus/mb_m.c ****     {MB_FUNC_WRITE_REGISTER, eMBMasterFuncWriteHoldingRegister},
 118:../FreeModbus/mb_m.c **** #endif
 119:../FreeModbus/mb_m.c **** #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
 120:../FreeModbus/mb_m.c ****     {MB_FUNC_READWRITE_MULTIPLE_REGISTERS, eMBMasterFuncReadWriteMultipleHoldingRegister},
 121:../FreeModbus/mb_m.c **** #endif
 122:../FreeModbus/mb_m.c **** #if MB_FUNC_READ_COILS_ENABLED > 0
 123:../FreeModbus/mb_m.c ****     {MB_FUNC_READ_COILS, eMBMasterFuncReadCoils},
 124:../FreeModbus/mb_m.c **** #endif
 125:../FreeModbus/mb_m.c **** #if MB_FUNC_WRITE_COIL_ENABLED > 0
 126:../FreeModbus/mb_m.c ****     {MB_FUNC_WRITE_SINGLE_COIL, eMBMasterFuncWriteCoil},
 127:../FreeModbus/mb_m.c **** #endif
 128:../FreeModbus/mb_m.c **** #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
 129:../FreeModbus/mb_m.c ****     {MB_FUNC_WRITE_MULTIPLE_COILS, eMBMasterFuncWriteMultipleCoils},
 130:../FreeModbus/mb_m.c **** #endif
 131:../FreeModbus/mb_m.c **** #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
 132:../FreeModbus/mb_m.c ****     {MB_FUNC_READ_DISCRETE_INPUTS, eMBMasterFuncReadDiscreteInputs},
 133:../FreeModbus/mb_m.c **** #endif
 134:../FreeModbus/mb_m.c **** };
 135:../FreeModbus/mb_m.c **** 
 136:../FreeModbus/mb_m.c **** /* ----------------------- Start implementation -----------------------------*/
 137:../FreeModbus/mb_m.c **** eMBErrorCode
 138:../FreeModbus/mb_m.c **** eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
 139:../FreeModbus/mb_m.c **** {
 118              		.loc 1 139 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 16
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 84B0     		sub	sp, sp, #16
 127              		.cfi_def_cfa_offset 24
 128 0004 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
 130 0006 3A60     		str	r2, [r7]
 131 0008 0246     		mov	r2, r0
 132 000a FA71     		strb	r2, [r7, #7]
 133 000c 0A46     		mov	r2, r1
 134 000e BA71     		strb	r2, [r7, #6]
 135 0010 7B71     		strb	r3, [r7, #5]
 140:../FreeModbus/mb_m.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 136              		.loc 1 140 0
 137 0012 0023     		movs	r3, #0
 138 0014 FB73     		strb	r3, [r7, #15]
 141:../FreeModbus/mb_m.c **** 
 142:../FreeModbus/mb_m.c **** 	switch (eMode)
 139              		.loc 1 142 0
 140 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 141 0018 002B     		cmp	r3, #0
 142 001a 4ED1     		bne	.L9
 143:../FreeModbus/mb_m.c **** 	{
 144:../FreeModbus/mb_m.c **** #if MB_MASTER_RTU_ENABLED > 0
 145:../FreeModbus/mb_m.c **** 	case MB_RTU:
 146:../FreeModbus/mb_m.c **** 		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 143              		.loc 1 146 0
 144 001c 40F20003 		movw	r3, #:lower16:pvMBMasterFrameStartCur
 145 0020 C0F20003 		movt	r3, #:upper16:pvMBMasterFrameStartCur
 146 0024 40F20002 		movw	r2, #:lower16:eMBMasterRTUStart
 147 0028 C0F20002 		movt	r2, #:upper16:eMBMasterRTUStart
 148 002c 1A60     		str	r2, [r3]
 147:../FreeModbus/mb_m.c **** 		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 149              		.loc 1 147 0
 150 002e 40F20003 		movw	r3, #:lower16:pvMBMasterFrameStopCur
 151 0032 C0F20003 		movt	r3, #:upper16:pvMBMasterFrameStopCur
 152 0036 40F20002 		movw	r2, #:lower16:eMBMasterRTUStop
 153 003a C0F20002 		movt	r2, #:upper16:eMBMasterRTUStop
 154 003e 1A60     		str	r2, [r3]
 148:../FreeModbus/mb_m.c **** 		peMBMasterFrameSendCur = eMBMasterRTUSend;
 155              		.loc 1 148 0
 156 0040 40F20003 		movw	r3, #:lower16:peMBMasterFrameSendCur
 157 0044 C0F20003 		movt	r3, #:upper16:peMBMasterFrameSendCur
 158 0048 40F20002 		movw	r2, #:lower16:eMBMasterRTUSend
 159 004c C0F20002 		movt	r2, #:upper16:eMBMasterRTUSend
 160 0050 1A60     		str	r2, [r3]
 149:../FreeModbus/mb_m.c **** 		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 161              		.loc 1 149 0
 162 0052 40F20003 		movw	r3, #:lower16:peMBMasterFrameReceiveCur
 163 0056 C0F20003 		movt	r3, #:upper16:peMBMasterFrameReceiveCur
 164 005a 40F20002 		movw	r2, #:lower16:eMBMasterRTUReceive
 165 005e C0F20002 		movt	r2, #:upper16:eMBMasterRTUReceive
 166 0062 1A60     		str	r2, [r3]
 150:../FreeModbus/mb_m.c **** 		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 167              		.loc 1 150 0
 168 0064 40F20003 		movw	r3, #:lower16:pvMBMasterFrameCloseCur
 169 0068 C0F20003 		movt	r3, #:upper16:pvMBMasterFrameCloseCur
 170 006c 0022     		movs	r2, #0
 171 006e 1A60     		str	r2, [r3]
 151:../FreeModbus/mb_m.c **** 		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 172              		.loc 1 151 0
 173 0070 40F20003 		movw	r3, #:lower16:pxMBMasterFrameCBByteReceived
 174 0074 C0F20003 		movt	r3, #:upper16:pxMBMasterFrameCBByteReceived
 175 0078 40F20002 		movw	r2, #:lower16:xMBMasterRTUReceiveFSM
 176 007c C0F20002 		movt	r2, #:upper16:xMBMasterRTUReceiveFSM
 177 0080 1A60     		str	r2, [r3]
 152:../FreeModbus/mb_m.c **** 		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 178              		.loc 1 152 0
 179 0082 40F20003 		movw	r3, #:lower16:pxMBMasterFrameCBTransmitterEmpty
 180 0086 C0F20003 		movt	r3, #:upper16:pxMBMasterFrameCBTransmitterEmpty
 181 008a 40F20002 		movw	r2, #:lower16:xMBMasterRTUTransmitFSM
 182 008e C0F20002 		movt	r2, #:upper16:xMBMasterRTUTransmitFSM
 183 0092 1A60     		str	r2, [r3]
 153:../FreeModbus/mb_m.c **** 		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 184              		.loc 1 153 0
 185 0094 40F20003 		movw	r3, #:lower16:pxMBMasterPortCBTimerExpired
 186 0098 C0F20003 		movt	r3, #:upper16:pxMBMasterPortCBTimerExpired
 187 009c 40F20002 		movw	r2, #:lower16:xMBMasterRTUTimerExpired
 188 00a0 C0F20002 		movt	r2, #:upper16:xMBMasterRTUTimerExpired
 189 00a4 1A60     		str	r2, [r3]
 154:../FreeModbus/mb_m.c **** 
 155:../FreeModbus/mb_m.c **** 		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 190              		.loc 1 155 0
 191 00a6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 192 00a8 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 193 00aa 1046     		mov	r0, r2
 194 00ac 3968     		ldr	r1, [r7]
 195 00ae 1A46     		mov	r2, r3
 196 00b0 FFF7FEFF 		bl	eMBMasterRTUInit
 197 00b4 0346     		mov	r3, r0
 198 00b6 FB73     		strb	r3, [r7, #15]
 156:../FreeModbus/mb_m.c **** 		break;
 199              		.loc 1 156 0
 200 00b8 02E0     		b	.L4
 201              	.L9:
 157:../FreeModbus/mb_m.c **** #endif
 158:../FreeModbus/mb_m.c **** #if MB_MASTER_ASCII_ENABLED > 0
 159:../FreeModbus/mb_m.c **** 		case MB_ASCII:
 160:../FreeModbus/mb_m.c **** 		pvMBMasterFrameStartCur = eMBMasterASCIIStart;
 161:../FreeModbus/mb_m.c **** 		pvMBMasterFrameStopCur = eMBMasterASCIIStop;
 162:../FreeModbus/mb_m.c **** 		peMBMasterFrameSendCur = eMBMasterASCIISend;
 163:../FreeModbus/mb_m.c **** 		peMBMasterFrameReceiveCur = eMBMasterASCIIReceive;
 164:../FreeModbus/mb_m.c **** 		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 165:../FreeModbus/mb_m.c **** 		pxMBMasterFrameCBByteReceived = xMBMasterASCIIReceiveFSM;
 166:../FreeModbus/mb_m.c **** 		pxMBMasterFrameCBTransmitterEmpty = xMBMasterASCIITransmitFSM;
 167:../FreeModbus/mb_m.c **** 		pxMBMasterPortCBTimerExpired = xMBMasterASCIITimerT1SExpired;
 168:../FreeModbus/mb_m.c **** 
 169:../FreeModbus/mb_m.c **** 		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
 170:../FreeModbus/mb_m.c **** 		break;
 171:../FreeModbus/mb_m.c **** #endif
 172:../FreeModbus/mb_m.c **** 	default:
 173:../FreeModbus/mb_m.c **** 		eStatus = MB_EINVAL;
 202              		.loc 1 173 0
 203 00ba 0223     		movs	r3, #2
 204 00bc FB73     		strb	r3, [r7, #15]
 174:../FreeModbus/mb_m.c **** 		break;
 205              		.loc 1 174 0
 206 00be 00BF     		nop
 207              	.L4:
 175:../FreeModbus/mb_m.c **** 	}
 176:../FreeModbus/mb_m.c **** 
 177:../FreeModbus/mb_m.c **** 	if (eStatus == MB_ENOERR)
 208              		.loc 1 177 0
 209 00c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 210 00c2 002B     		cmp	r3, #0
 211 00c4 0FD1     		bne	.L5
 178:../FreeModbus/mb_m.c **** 	{
 179:../FreeModbus/mb_m.c **** 		if (!xMBMasterPortEventInit())
 212              		.loc 1 179 0
 213 00c6 FFF7FEFF 		bl	xMBMasterPortEventInit
 214 00ca 0346     		mov	r3, r0
 215 00cc 002B     		cmp	r3, #0
 216 00ce 02D1     		bne	.L6
 180:../FreeModbus/mb_m.c **** 		{
 181:../FreeModbus/mb_m.c **** 			/* port dependent event module initalization failed. */
 182:../FreeModbus/mb_m.c **** 			eStatus = MB_EPORTERR;
 217              		.loc 1 182 0
 218 00d0 0323     		movs	r3, #3
 219 00d2 FB73     		strb	r3, [r7, #15]
 220 00d4 05E0     		b	.L7
 221              	.L6:
 183:../FreeModbus/mb_m.c **** 		}
 184:../FreeModbus/mb_m.c **** 		else
 185:../FreeModbus/mb_m.c **** 		{
 186:../FreeModbus/mb_m.c **** 			eMBState = STATE_DISABLED;
 222              		.loc 1 186 0
 223 00d6 40F20003 		movw	r3, #:lower16:eMBState
 224 00da C0F20003 		movt	r3, #:upper16:eMBState
 225 00de 0122     		movs	r2, #1
 226 00e0 1A70     		strb	r2, [r3]
 227              	.L7:
 187:../FreeModbus/mb_m.c **** 		}
 188:../FreeModbus/mb_m.c **** 		/* initialize the OS resource for modbus master. */
 189:../FreeModbus/mb_m.c **** 		vMBMasterOsResInit();
 228              		.loc 1 189 0
 229 00e2 FFF7FEFF 		bl	vMBMasterOsResInit
 230              	.L5:
 190:../FreeModbus/mb_m.c **** 	}
 191:../FreeModbus/mb_m.c **** 	return eStatus;
 231              		.loc 1 191 0
 232 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 192:../FreeModbus/mb_m.c **** }
 233              		.loc 1 192 0
 234 00e8 1846     		mov	r0, r3
 235 00ea 1037     		adds	r7, r7, #16
 236 00ec BD46     		mov	sp, r7
 237              		@ sp needed
 238 00ee 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE29:
 242              		.section	.text.eMBMasterClose,"ax",%progbits
 243              		.align	2
 244              		.global	eMBMasterClose
 245              		.thumb
 246              		.thumb_func
 248              	eMBMasterClose:
 249              	.LFB30:
 193:../FreeModbus/mb_m.c **** 
 194:../FreeModbus/mb_m.c **** eMBErrorCode
 195:../FreeModbus/mb_m.c **** eMBMasterClose( void )
 196:../FreeModbus/mb_m.c **** {
 250              		.loc 1 196 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 80B5     		push	{r7, lr}
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 82B0     		sub	sp, sp, #8
 259              		.cfi_def_cfa_offset 16
 260 0004 00AF     		add	r7, sp, #0
 261              		.cfi_def_cfa_register 7
 197:../FreeModbus/mb_m.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 262              		.loc 1 197 0
 263 0006 0023     		movs	r3, #0
 264 0008 FB71     		strb	r3, [r7, #7]
 198:../FreeModbus/mb_m.c **** 
 199:../FreeModbus/mb_m.c ****     if( eMBState == STATE_DISABLED )
 265              		.loc 1 199 0
 266 000a 40F20003 		movw	r3, #:lower16:eMBState
 267 000e C0F20003 		movt	r3, #:upper16:eMBState
 268 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 269 0014 012B     		cmp	r3, #1
 270 0016 0DD1     		bne	.L11
 200:../FreeModbus/mb_m.c ****     {
 201:../FreeModbus/mb_m.c ****         if( pvMBMasterFrameCloseCur != NULL )
 271              		.loc 1 201 0
 272 0018 40F20003 		movw	r3, #:lower16:pvMBMasterFrameCloseCur
 273 001c C0F20003 		movt	r3, #:upper16:pvMBMasterFrameCloseCur
 274 0020 1B68     		ldr	r3, [r3]
 275 0022 002B     		cmp	r3, #0
 276 0024 08D0     		beq	.L13
 202:../FreeModbus/mb_m.c ****         {
 203:../FreeModbus/mb_m.c ****             pvMBMasterFrameCloseCur(  );
 277              		.loc 1 203 0
 278 0026 40F20003 		movw	r3, #:lower16:pvMBMasterFrameCloseCur
 279 002a C0F20003 		movt	r3, #:upper16:pvMBMasterFrameCloseCur
 280 002e 1B68     		ldr	r3, [r3]
 281 0030 9847     		blx	r3
 282 0032 01E0     		b	.L13
 283              	.L11:
 204:../FreeModbus/mb_m.c ****         }
 205:../FreeModbus/mb_m.c ****     }
 206:../FreeModbus/mb_m.c ****     else
 207:../FreeModbus/mb_m.c ****     {
 208:../FreeModbus/mb_m.c ****         eStatus = MB_EILLSTATE;
 284              		.loc 1 208 0
 285 0034 0623     		movs	r3, #6
 286 0036 FB71     		strb	r3, [r7, #7]
 287              	.L13:
 209:../FreeModbus/mb_m.c ****     }
 210:../FreeModbus/mb_m.c ****     return eStatus;
 288              		.loc 1 210 0
 289 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 211:../FreeModbus/mb_m.c **** }
 290              		.loc 1 211 0
 291 003a 1846     		mov	r0, r3
 292 003c 0837     		adds	r7, r7, #8
 293 003e BD46     		mov	sp, r7
 294              		@ sp needed
 295 0040 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE30:
 299 0042 00BF     		.section	.text.eMBMasterEnable,"ax",%progbits
 300              		.align	2
 301              		.global	eMBMasterEnable
 302              		.thumb
 303              		.thumb_func
 305              	eMBMasterEnable:
 306              	.LFB31:
 212:../FreeModbus/mb_m.c **** 
 213:../FreeModbus/mb_m.c **** eMBErrorCode
 214:../FreeModbus/mb_m.c **** eMBMasterEnable( void )
 215:../FreeModbus/mb_m.c **** {
 307              		.loc 1 215 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 8
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311 0000 80B5     		push	{r7, lr}
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 7, -8
 314              		.cfi_offset 14, -4
 315 0002 82B0     		sub	sp, sp, #8
 316              		.cfi_def_cfa_offset 16
 317 0004 00AF     		add	r7, sp, #0
 318              		.cfi_def_cfa_register 7
 216:../FreeModbus/mb_m.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 319              		.loc 1 216 0
 320 0006 0023     		movs	r3, #0
 321 0008 FB71     		strb	r3, [r7, #7]
 217:../FreeModbus/mb_m.c **** 
 218:../FreeModbus/mb_m.c ****     if( eMBState == STATE_DISABLED )
 322              		.loc 1 218 0
 323 000a 40F20003 		movw	r3, #:lower16:eMBState
 324 000e C0F20003 		movt	r3, #:upper16:eMBState
 325 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 0014 012B     		cmp	r3, #1
 327 0016 0CD1     		bne	.L16
 219:../FreeModbus/mb_m.c ****     {
 220:../FreeModbus/mb_m.c ****         /* Activate the protocol stack. */
 221:../FreeModbus/mb_m.c ****         pvMBMasterFrameStartCur(  );
 328              		.loc 1 221 0
 329 0018 40F20003 		movw	r3, #:lower16:pvMBMasterFrameStartCur
 330 001c C0F20003 		movt	r3, #:upper16:pvMBMasterFrameStartCur
 331 0020 1B68     		ldr	r3, [r3]
 332 0022 9847     		blx	r3
 222:../FreeModbus/mb_m.c ****         eMBState = STATE_ENABLED;
 333              		.loc 1 222 0
 334 0024 40F20003 		movw	r3, #:lower16:eMBState
 335 0028 C0F20003 		movt	r3, #:upper16:eMBState
 336 002c 0022     		movs	r2, #0
 337 002e 1A70     		strb	r2, [r3]
 338 0030 01E0     		b	.L17
 339              	.L16:
 223:../FreeModbus/mb_m.c ****     }
 224:../FreeModbus/mb_m.c ****     else
 225:../FreeModbus/mb_m.c ****     {
 226:../FreeModbus/mb_m.c ****         eStatus = MB_EILLSTATE;
 340              		.loc 1 226 0
 341 0032 0623     		movs	r3, #6
 342 0034 FB71     		strb	r3, [r7, #7]
 343              	.L17:
 227:../FreeModbus/mb_m.c ****     }
 228:../FreeModbus/mb_m.c ****     return eStatus;
 344              		.loc 1 228 0
 345 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 229:../FreeModbus/mb_m.c **** }
 346              		.loc 1 229 0
 347 0038 1846     		mov	r0, r3
 348 003a 0837     		adds	r7, r7, #8
 349 003c BD46     		mov	sp, r7
 350              		@ sp needed
 351 003e 80BD     		pop	{r7, pc}
 352              		.cfi_endproc
 353              	.LFE31:
 355              		.section	.text.eMBMasterDisable,"ax",%progbits
 356              		.align	2
 357              		.global	eMBMasterDisable
 358              		.thumb
 359              		.thumb_func
 361              	eMBMasterDisable:
 362              	.LFB32:
 230:../FreeModbus/mb_m.c **** 
 231:../FreeModbus/mb_m.c **** eMBErrorCode
 232:../FreeModbus/mb_m.c **** eMBMasterDisable( void )
 233:../FreeModbus/mb_m.c **** {
 363              		.loc 1 233 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 82B0     		sub	sp, sp, #8
 372              		.cfi_def_cfa_offset 16
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 234:../FreeModbus/mb_m.c ****     eMBErrorCode    eStatus;
 235:../FreeModbus/mb_m.c **** 
 236:../FreeModbus/mb_m.c ****     if( eMBState == STATE_ENABLED )
 375              		.loc 1 236 0
 376 0006 40F20003 		movw	r3, #:lower16:eMBState
 377 000a C0F20003 		movt	r3, #:upper16:eMBState
 378 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 379 0010 002B     		cmp	r3, #0
 380 0012 0ED1     		bne	.L20
 237:../FreeModbus/mb_m.c ****     {
 238:../FreeModbus/mb_m.c ****         pvMBMasterFrameStopCur(  );
 381              		.loc 1 238 0
 382 0014 40F20003 		movw	r3, #:lower16:pvMBMasterFrameStopCur
 383 0018 C0F20003 		movt	r3, #:upper16:pvMBMasterFrameStopCur
 384 001c 1B68     		ldr	r3, [r3]
 385 001e 9847     		blx	r3
 239:../FreeModbus/mb_m.c ****         eMBState = STATE_DISABLED;
 386              		.loc 1 239 0
 387 0020 40F20003 		movw	r3, #:lower16:eMBState
 388 0024 C0F20003 		movt	r3, #:upper16:eMBState
 389 0028 0122     		movs	r2, #1
 390 002a 1A70     		strb	r2, [r3]
 240:../FreeModbus/mb_m.c ****         eStatus = MB_ENOERR;
 391              		.loc 1 240 0
 392 002c 0023     		movs	r3, #0
 393 002e FB71     		strb	r3, [r7, #7]
 394 0030 0BE0     		b	.L21
 395              	.L20:
 241:../FreeModbus/mb_m.c ****     }
 242:../FreeModbus/mb_m.c ****     else if( eMBState == STATE_DISABLED )
 396              		.loc 1 242 0
 397 0032 40F20003 		movw	r3, #:lower16:eMBState
 398 0036 C0F20003 		movt	r3, #:upper16:eMBState
 399 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 400 003c 012B     		cmp	r3, #1
 401 003e 02D1     		bne	.L22
 243:../FreeModbus/mb_m.c ****     {
 244:../FreeModbus/mb_m.c ****         eStatus = MB_ENOERR;
 402              		.loc 1 244 0
 403 0040 0023     		movs	r3, #0
 404 0042 FB71     		strb	r3, [r7, #7]
 405 0044 01E0     		b	.L21
 406              	.L22:
 245:../FreeModbus/mb_m.c ****     }
 246:../FreeModbus/mb_m.c ****     else
 247:../FreeModbus/mb_m.c ****     {
 248:../FreeModbus/mb_m.c ****         eStatus = MB_EILLSTATE;
 407              		.loc 1 248 0
 408 0046 0623     		movs	r3, #6
 409 0048 FB71     		strb	r3, [r7, #7]
 410              	.L21:
 249:../FreeModbus/mb_m.c ****     }
 250:../FreeModbus/mb_m.c ****     return eStatus;
 411              		.loc 1 250 0
 412 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 251:../FreeModbus/mb_m.c **** }
 413              		.loc 1 251 0
 414 004c 1846     		mov	r0, r3
 415 004e 0837     		adds	r7, r7, #8
 416 0050 BD46     		mov	sp, r7
 417              		@ sp needed
 418 0052 80BD     		pop	{r7, pc}
 419              		.cfi_endproc
 420              	.LFE32:
 422              		.section	.text.eMBMasterPoll,"ax",%progbits
 423              		.align	2
 424              		.global	eMBMasterPoll
 425              		.thumb
 426              		.thumb_func
 428              	eMBMasterPoll:
 429              	.LFB33:
 252:../FreeModbus/mb_m.c **** 
 253:../FreeModbus/mb_m.c **** eMBErrorCode
 254:../FreeModbus/mb_m.c **** eMBMasterPoll( void )
 255:../FreeModbus/mb_m.c **** {
 430              		.loc 1 255 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 16
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 435              		.cfi_def_cfa_offset 20
 436              		.cfi_offset 4, -20
 437              		.cfi_offset 5, -16
 438              		.cfi_offset 6, -12
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 0002 85B0     		sub	sp, sp, #20
 442              		.cfi_def_cfa_offset 40
 443 0004 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 256:../FreeModbus/mb_m.c ****     static UCHAR   *ucMBFrame;
 257:../FreeModbus/mb_m.c ****     static UCHAR    ucRcvAddress;
 258:../FreeModbus/mb_m.c ****     static UCHAR    ucFunctionCode;
 259:../FreeModbus/mb_m.c ****     static USHORT   usLength;
 260:../FreeModbus/mb_m.c ****     static eMBException eException;
 261:../FreeModbus/mb_m.c **** 
 262:../FreeModbus/mb_m.c ****     int             i , j;
 263:../FreeModbus/mb_m.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 445              		.loc 1 263 0
 446 0006 0023     		movs	r3, #0
 447 0008 FB71     		strb	r3, [r7, #7]
 264:../FreeModbus/mb_m.c ****     eMBMasterEventType    eEvent;
 265:../FreeModbus/mb_m.c ****     eMBMasterErrorEventType errorType;
 266:../FreeModbus/mb_m.c **** 
 267:../FreeModbus/mb_m.c ****     /* Check if the protocol stack is ready. */
 268:../FreeModbus/mb_m.c ****     if( eMBState != STATE_ENABLED )
 448              		.loc 1 268 0
 449 000a 40F20003 		movw	r3, #:lower16:eMBState
 450 000e C0F20003 		movt	r3, #:upper16:eMBState
 451 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 452 0014 002B     		cmp	r3, #0
 453 0016 01D0     		beq	.L25
 269:../FreeModbus/mb_m.c ****     {
 270:../FreeModbus/mb_m.c ****         return MB_EILLSTATE;
 454              		.loc 1 270 0
 455 0018 0623     		movs	r3, #6
 456 001a 78E1     		b	.L52
 457              	.L25:
 271:../FreeModbus/mb_m.c ****     }
 272:../FreeModbus/mb_m.c **** 
 273:../FreeModbus/mb_m.c ****     /* Check if there is a event available. If not return control to caller.
 274:../FreeModbus/mb_m.c ****      * Otherwise we will handle the event. */
 275:../FreeModbus/mb_m.c ****     if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 458              		.loc 1 275 0
 459 001c 3B1D     		adds	r3, r7, #4
 460 001e 1846     		mov	r0, r3
 461 0020 FFF7FEFF 		bl	xMBMasterPortEventGet
 462 0024 0346     		mov	r3, r0
 463 0026 012B     		cmp	r3, #1
 464 0028 40F07081 		bne	.L27
 276:../FreeModbus/mb_m.c ****     {
 277:../FreeModbus/mb_m.c ****         switch ( eEvent )
 465              		.loc 1 277 0
 466 002c BB88     		ldrh	r3, [r7, #4]
 467 002e 013B     		subs	r3, r3, #1
 468 0030 0F2B     		cmp	r3, #15
 469 0032 00F26B81 		bhi	.L27
 470 0036 01A2     		adr	r2, .L29
 471 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 472              		.p2align 2
 473              	.L29:
 474 003c 0D030000 		.word	.L27+1
 475 0040 7D000000 		.word	.L30+1
 476 0044 0D030000 		.word	.L27+1
 477 0048 D7000000 		.word	.L31+1
 478 004c 0D030000 		.word	.L27+1
 479 0050 0D030000 		.word	.L27+1
 480 0054 0D030000 		.word	.L27+1
 481 0058 3D020000 		.word	.L32+1
 482 005c 0D030000 		.word	.L27+1
 483 0060 0D030000 		.word	.L27+1
 484 0064 0D030000 		.word	.L27+1
 485 0068 0D030000 		.word	.L27+1
 486 006c 0D030000 		.word	.L27+1
 487 0070 0D030000 		.word	.L27+1
 488 0074 0D030000 		.word	.L27+1
 489 0078 79020000 		.word	.L33+1
 490              	.L30:
 278:../FreeModbus/mb_m.c ****         {
 279:../FreeModbus/mb_m.c ****         case EV_MASTER_READY:
 280:../FreeModbus/mb_m.c ****             break;
 281:../FreeModbus/mb_m.c **** 
 282:../FreeModbus/mb_m.c ****         case EV_MASTER_FRAME_RECEIVED:
 283:../FreeModbus/mb_m.c **** 			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 491              		.loc 1 283 0
 492 007c 40F20003 		movw	r3, #:lower16:peMBMasterFrameReceiveCur
 493 0080 C0F20003 		movt	r3, #:upper16:peMBMasterFrameReceiveCur
 494 0084 1B68     		ldr	r3, [r3]
 495 0086 40F20000 		movw	r0, #:lower16:ucRcvAddress.6314
 496 008a C0F20000 		movt	r0, #:upper16:ucRcvAddress.6314
 497 008e 40F20001 		movw	r1, #:lower16:ucMBFrame.6313
 498 0092 C0F20001 		movt	r1, #:upper16:ucMBFrame.6313
 499 0096 40F20002 		movw	r2, #:lower16:usLength.6316
 500 009a C0F20002 		movt	r2, #:upper16:usLength.6316
 501 009e 9847     		blx	r3
 502 00a0 0346     		mov	r3, r0
 503 00a2 FB71     		strb	r3, [r7, #7]
 284:../FreeModbus/mb_m.c **** 			/* Check if the frame is for us. If not ,send an error process event. */
 285:../FreeModbus/mb_m.c **** 			if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 504              		.loc 1 285 0
 505 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 506 00a6 002B     		cmp	r3, #0
 507 00a8 0ED1     		bne	.L34
 508              		.loc 1 285 0 is_stmt 0 discriminator 1
 509 00aa FFF7FEFF 		bl	ucMBMasterGetDestAddress
 510 00ae 0346     		mov	r3, r0
 511 00b0 1A46     		mov	r2, r3
 512 00b2 40F20003 		movw	r3, #:lower16:ucRcvAddress.6314
 513 00b6 C0F20003 		movt	r3, #:upper16:ucRcvAddress.6314
 514 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515 00bc 9A42     		cmp	r2, r3
 516 00be 03D1     		bne	.L34
 286:../FreeModbus/mb_m.c **** 			{
 287:../FreeModbus/mb_m.c **** 				( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 517              		.loc 1 287 0 is_stmt 1
 518 00c0 0420     		movs	r0, #4
 519 00c2 FFF7FEFF 		bl	xMBMasterPortEventPost
 288:../FreeModbus/mb_m.c **** 			}
 289:../FreeModbus/mb_m.c **** 			else
 290:../FreeModbus/mb_m.c **** 			{
 291:../FreeModbus/mb_m.c **** 				vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 292:../FreeModbus/mb_m.c **** 				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 293:../FreeModbus/mb_m.c **** 			}
 294:../FreeModbus/mb_m.c **** 			break;
 520              		.loc 1 294 0
 521 00c6 21E1     		b	.L27
 522              	.L34:
 291:../FreeModbus/mb_m.c **** 				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 523              		.loc 1 291 0
 524 00c8 0120     		movs	r0, #1
 525 00ca FFF7FEFF 		bl	vMBMasterSetErrorType
 292:../FreeModbus/mb_m.c **** 			}
 526              		.loc 1 292 0
 527 00ce 1020     		movs	r0, #16
 528 00d0 FFF7FEFF 		bl	xMBMasterPortEventPost
 529              		.loc 1 294 0
 530 00d4 1AE1     		b	.L27
 531              	.L31:
 295:../FreeModbus/mb_m.c **** 
 296:../FreeModbus/mb_m.c ****         case EV_MASTER_EXECUTE:
 297:../FreeModbus/mb_m.c ****             ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 532              		.loc 1 297 0
 533 00d6 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 534 00da C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 535 00de 1B68     		ldr	r3, [r3]
 536 00e0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 537 00e2 40F20003 		movw	r3, #:lower16:ucFunctionCode.6315
 538 00e6 C0F20003 		movt	r3, #:upper16:ucFunctionCode.6315
 539 00ea 1A70     		strb	r2, [r3]
 298:../FreeModbus/mb_m.c ****             eException = MB_EX_ILLEGAL_FUNCTION;
 540              		.loc 1 298 0
 541 00ec 40F20003 		movw	r3, #:lower16:eException.6317
 542 00f0 C0F20003 		movt	r3, #:upper16:eException.6317
 543 00f4 0122     		movs	r2, #1
 544 00f6 1A70     		strb	r2, [r3]
 299:../FreeModbus/mb_m.c ****             /* If receive frame has exception .The receive function code highest bit is 1.*/
 300:../FreeModbus/mb_m.c ****             if(ucFunctionCode >> 7) {
 545              		.loc 1 300 0
 546 00f8 40F20003 		movw	r3, #:lower16:ucFunctionCode.6315
 547 00fc C0F20003 		movt	r3, #:upper16:ucFunctionCode.6315
 548 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 549 0102 DBB2     		uxtb	r3, r3
 550 0104 5BB2     		sxtb	r3, r3
 551 0106 002B     		cmp	r3, #0
 552 0108 0CDA     		bge	.L36
 301:../FreeModbus/mb_m.c ****             	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 553              		.loc 1 301 0
 554 010a 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 555 010e C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 556 0112 1B68     		ldr	r3, [r3]
 557 0114 0133     		adds	r3, r3, #1
 558 0116 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 559 0118 40F20003 		movw	r3, #:lower16:eException.6317
 560 011c C0F20003 		movt	r3, #:upper16:eException.6317
 561 0120 1A70     		strb	r2, [r3]
 562 0122 78E0     		b	.L37
 563              	.L36:
 302:../FreeModbus/mb_m.c ****             }
 303:../FreeModbus/mb_m.c **** 			else
 304:../FreeModbus/mb_m.c **** 			{
 305:../FreeModbus/mb_m.c **** 				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 564              		.loc 1 305 0
 565 0124 0023     		movs	r3, #0
 566 0126 FB60     		str	r3, [r7, #12]
 567 0128 72E0     		b	.L38
 568              	.L45:
 306:../FreeModbus/mb_m.c **** 				{
 307:../FreeModbus/mb_m.c **** 					/* No more function handlers registered. Abort. */
 308:../FreeModbus/mb_m.c **** 					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 569              		.loc 1 308 0
 570 012a 40F20003 		movw	r3, #:lower16:xMasterFuncHandlers
 571 012e C0F20003 		movt	r3, #:upper16:xMasterFuncHandlers
 572 0132 FA68     		ldr	r2, [r7, #12]
 573 0134 13F83230 		ldrb	r3, [r3, r2, lsl #3]	@ zero_extendqisi2
 574 0138 002B     		cmp	r3, #0
 575 013a 00D1     		bne	.L39
 309:../FreeModbus/mb_m.c **** 						break;
 576              		.loc 1 309 0
 577 013c 6BE0     		b	.L37
 578              	.L39:
 310:../FreeModbus/mb_m.c **** 					}
 311:../FreeModbus/mb_m.c **** 					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 579              		.loc 1 311 0
 580 013e 40F20003 		movw	r3, #:lower16:xMasterFuncHandlers
 581 0142 C0F20003 		movt	r3, #:upper16:xMasterFuncHandlers
 582 0146 FA68     		ldr	r2, [r7, #12]
 583 0148 13F83220 		ldrb	r2, [r3, r2, lsl #3]	@ zero_extendqisi2
 584 014c 40F20003 		movw	r3, #:lower16:ucFunctionCode.6315
 585 0150 C0F20003 		movt	r3, #:upper16:ucFunctionCode.6315
 586 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 587 0156 9A42     		cmp	r2, r3
 588 0158 57D1     		bne	.L40
 312:../FreeModbus/mb_m.c **** 						vMBMasterSetCBRunInMasterMode(TRUE);
 589              		.loc 1 312 0
 590 015a 0120     		movs	r0, #1
 591 015c FFF7FEFF 		bl	vMBMasterSetCBRunInMasterMode
 313:../FreeModbus/mb_m.c **** 						/* If master request is broadcast,
 314:../FreeModbus/mb_m.c **** 						 * the master need execute function for all slave.
 315:../FreeModbus/mb_m.c **** 						 */
 316:../FreeModbus/mb_m.c **** 						if ( xMBMasterRequestIsBroadcast() ) {
 592              		.loc 1 316 0
 593 0160 FFF7FEFF 		bl	xMBMasterRequestIsBroadcast
 594 0164 0346     		mov	r3, r0
 595 0166 002B     		cmp	r3, #0
 596 0168 31D0     		beq	.L41
 317:../FreeModbus/mb_m.c **** 							usLength = usMBMasterGetPDUSndLength();
 597              		.loc 1 317 0
 598 016a FFF7FEFF 		bl	usMBMasterGetPDUSndLength
 599 016e 0346     		mov	r3, r0
 600 0170 1A46     		mov	r2, r3
 601 0172 40F20003 		movw	r3, #:lower16:usLength.6316
 602 0176 C0F20003 		movt	r3, #:upper16:usLength.6316
 603 017a 1A80     		strh	r2, [r3]	@ movhi
 318:../FreeModbus/mb_m.c **** 							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 604              		.loc 1 318 0
 605 017c 0123     		movs	r3, #1
 606 017e BB60     		str	r3, [r7, #8]
 607 0180 21E0     		b	.L42
 608              	.L43:
 319:../FreeModbus/mb_m.c **** 								vMBMasterSetDestAddress(j);
 609              		.loc 1 319 0 discriminator 2
 610 0182 BB68     		ldr	r3, [r7, #8]
 611 0184 DBB2     		uxtb	r3, r3
 612 0186 1846     		mov	r0, r3
 613 0188 FFF7FEFF 		bl	vMBMasterSetDestAddress
 320:../FreeModbus/mb_m.c **** 								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 614              		.loc 1 320 0 discriminator 2
 615 018c 40F20002 		movw	r2, #:lower16:xMasterFuncHandlers
 616 0190 C0F20002 		movt	r2, #:upper16:xMasterFuncHandlers
 617 0194 FB68     		ldr	r3, [r7, #12]
 618 0196 DB00     		lsls	r3, r3, #3
 619 0198 1344     		add	r3, r3, r2
 620 019a 5A68     		ldr	r2, [r3, #4]
 621 019c 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 622 01a0 C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 623 01a4 1B68     		ldr	r3, [r3]
 624 01a6 1846     		mov	r0, r3
 625 01a8 40F20001 		movw	r1, #:lower16:usLength.6316
 626 01ac C0F20001 		movt	r1, #:upper16:usLength.6316
 627 01b0 9047     		blx	r2
 628 01b2 0346     		mov	r3, r0
 629 01b4 1A46     		mov	r2, r3
 630 01b6 40F20003 		movw	r3, #:lower16:eException.6317
 631 01ba C0F20003 		movt	r3, #:upper16:eException.6317
 632 01be 1A70     		strb	r2, [r3]
 318:../FreeModbus/mb_m.c **** 							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 633              		.loc 1 318 0 discriminator 2
 634 01c0 BB68     		ldr	r3, [r7, #8]
 635 01c2 0133     		adds	r3, r3, #1
 636 01c4 BB60     		str	r3, [r7, #8]
 637              	.L42:
 318:../FreeModbus/mb_m.c **** 							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 638              		.loc 1 318 0 is_stmt 0 discriminator 1
 639 01c6 BB68     		ldr	r3, [r7, #8]
 640 01c8 102B     		cmp	r3, #16
 641 01ca DADD     		ble	.L43
 642 01cc 19E0     		b	.L44
 643              	.L41:
 321:../FreeModbus/mb_m.c **** 							}
 322:../FreeModbus/mb_m.c **** 						}
 323:../FreeModbus/mb_m.c **** 						else {
 324:../FreeModbus/mb_m.c **** 							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 644              		.loc 1 324 0 is_stmt 1
 645 01ce 40F20002 		movw	r2, #:lower16:xMasterFuncHandlers
 646 01d2 C0F20002 		movt	r2, #:upper16:xMasterFuncHandlers
 647 01d6 FB68     		ldr	r3, [r7, #12]
 648 01d8 DB00     		lsls	r3, r3, #3
 649 01da 1344     		add	r3, r3, r2
 650 01dc 5A68     		ldr	r2, [r3, #4]
 651 01de 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 652 01e2 C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 653 01e6 1B68     		ldr	r3, [r3]
 654 01e8 1846     		mov	r0, r3
 655 01ea 40F20001 		movw	r1, #:lower16:usLength.6316
 656 01ee C0F20001 		movt	r1, #:upper16:usLength.6316
 657 01f2 9047     		blx	r2
 658 01f4 0346     		mov	r3, r0
 659 01f6 1A46     		mov	r2, r3
 660 01f8 40F20003 		movw	r3, #:lower16:eException.6317
 661 01fc C0F20003 		movt	r3, #:upper16:eException.6317
 662 0200 1A70     		strb	r2, [r3]
 663              	.L44:
 325:../FreeModbus/mb_m.c **** 						}
 326:../FreeModbus/mb_m.c **** 						vMBMasterSetCBRunInMasterMode(FALSE);
 664              		.loc 1 326 0
 665 0202 0020     		movs	r0, #0
 666 0204 FFF7FEFF 		bl	vMBMasterSetCBRunInMasterMode
 327:../FreeModbus/mb_m.c **** 						break;
 667              		.loc 1 327 0
 668 0208 05E0     		b	.L37
 669              	.L40:
 305:../FreeModbus/mb_m.c **** 				{
 670              		.loc 1 305 0
 671 020a FB68     		ldr	r3, [r7, #12]
 672 020c 0133     		adds	r3, r3, #1
 673 020e FB60     		str	r3, [r7, #12]
 674              	.L38:
 305:../FreeModbus/mb_m.c **** 				{
 675              		.loc 1 305 0 is_stmt 0 discriminator 1
 676 0210 FB68     		ldr	r3, [r7, #12]
 677 0212 0F2B     		cmp	r3, #15
 678 0214 89DD     		ble	.L45
 679              	.L37:
 328:../FreeModbus/mb_m.c **** 					}
 329:../FreeModbus/mb_m.c **** 				}
 330:../FreeModbus/mb_m.c **** 			}
 331:../FreeModbus/mb_m.c ****             /* If master has exception ,Master will send error process.Otherwise the Master is idle
 332:../FreeModbus/mb_m.c ****             if (eException != MB_EX_NONE) {
 680              		.loc 1 332 0 is_stmt 1
 681 0216 40F20003 		movw	r3, #:lower16:eException.6317
 682 021a C0F20003 		movt	r3, #:upper16:eException.6317
 683 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0220 002B     		cmp	r3, #0
 685 0222 06D0     		beq	.L46
 333:../FreeModbus/mb_m.c ****             	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 686              		.loc 1 333 0
 687 0224 0220     		movs	r0, #2
 688 0226 FFF7FEFF 		bl	vMBMasterSetErrorType
 334:../FreeModbus/mb_m.c ****             	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 689              		.loc 1 334 0
 690 022a 1020     		movs	r0, #16
 691 022c FFF7FEFF 		bl	xMBMasterPortEventPost
 335:../FreeModbus/mb_m.c ****             }
 336:../FreeModbus/mb_m.c ****             else {
 337:../FreeModbus/mb_m.c ****             	vMBMasterCBRequestSuccess( );
 338:../FreeModbus/mb_m.c ****             	vMBMasterRunResRelease( );
 339:../FreeModbus/mb_m.c ****             }
 340:../FreeModbus/mb_m.c ****             break;
 692              		.loc 1 340 0
 693 0230 6CE0     		b	.L27
 694              	.L46:
 337:../FreeModbus/mb_m.c ****             	vMBMasterRunResRelease( );
 695              		.loc 1 337 0
 696 0232 FFF7FEFF 		bl	vMBMasterCBRequestSuccess
 338:../FreeModbus/mb_m.c ****             }
 697              		.loc 1 338 0
 698 0236 FFF7FEFF 		bl	vMBMasterRunResRelease
 699              		.loc 1 340 0
 700 023a 67E0     		b	.L27
 701              	.L32:
 341:../FreeModbus/mb_m.c **** 
 342:../FreeModbus/mb_m.c ****         case EV_MASTER_FRAME_SENT:
 343:../FreeModbus/mb_m.c ****         	/* Master is busy now. */
 344:../FreeModbus/mb_m.c ****         	vMBMasterGetPDUSndBuf( &ucMBFrame );
 702              		.loc 1 344 0
 703 023c 40F20000 		movw	r0, #:lower16:ucMBFrame.6313
 704 0240 C0F20000 		movt	r0, #:upper16:ucMBFrame.6313
 705 0244 FFF7FEFF 		bl	vMBMasterGetPDUSndBuf
 345:../FreeModbus/mb_m.c **** 			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLeng
 706              		.loc 1 345 0
 707 0248 40F20003 		movw	r3, #:lower16:peMBMasterFrameSendCur
 708 024c C0F20003 		movt	r3, #:upper16:peMBMasterFrameSendCur
 709 0250 1C68     		ldr	r4, [r3]
 710 0252 FFF7FEFF 		bl	ucMBMasterGetDestAddress
 711 0256 0346     		mov	r3, r0
 712 0258 1E46     		mov	r6, r3
 713 025a 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 714 025e C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 715 0262 1D68     		ldr	r5, [r3]
 716 0264 FFF7FEFF 		bl	usMBMasterGetPDUSndLength
 717 0268 0346     		mov	r3, r0
 718 026a 3046     		mov	r0, r6
 719 026c 2946     		mov	r1, r5
 720 026e 1A46     		mov	r2, r3
 721 0270 A047     		blx	r4
 722 0272 0346     		mov	r3, r0
 723 0274 FB71     		strb	r3, [r7, #7]
 346:../FreeModbus/mb_m.c ****             break;
 724              		.loc 1 346 0
 725 0276 49E0     		b	.L27
 726              	.L33:
 347:../FreeModbus/mb_m.c **** 
 348:../FreeModbus/mb_m.c ****         case EV_MASTER_ERROR_PROCESS:
 349:../FreeModbus/mb_m.c ****         	/* Execute specified error process callback function. */
 350:../FreeModbus/mb_m.c **** 			errorType = eMBMasterGetErrorType();
 727              		.loc 1 350 0
 728 0278 FFF7FEFF 		bl	eMBMasterGetErrorType
 729 027c 0346     		mov	r3, r0
 730 027e BB71     		strb	r3, [r7, #6]
 351:../FreeModbus/mb_m.c **** 			vMBMasterGetPDUSndBuf( &ucMBFrame );
 731              		.loc 1 351 0
 732 0280 40F20000 		movw	r0, #:lower16:ucMBFrame.6313
 733 0284 C0F20000 		movt	r0, #:upper16:ucMBFrame.6313
 734 0288 FFF7FEFF 		bl	vMBMasterGetPDUSndBuf
 352:../FreeModbus/mb_m.c **** 			switch (errorType) {
 735              		.loc 1 352 0
 736 028c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 737 028e 012B     		cmp	r3, #1
 738 0290 15D0     		beq	.L49
 739 0292 022B     		cmp	r3, #2
 740 0294 25D0     		beq	.L50
 741 0296 002B     		cmp	r3, #0
 742 0298 35D1     		bne	.L48
 353:../FreeModbus/mb_m.c **** 			case EV_ERROR_RESPOND_TIMEOUT:
 354:../FreeModbus/mb_m.c **** 				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 743              		.loc 1 354 0
 744 029a FFF7FEFF 		bl	ucMBMasterGetDestAddress
 745 029e 0346     		mov	r3, r0
 746 02a0 1D46     		mov	r5, r3
 747 02a2 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 748 02a6 C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 749 02aa 1C68     		ldr	r4, [r3]
 750 02ac FFF7FEFF 		bl	usMBMasterGetPDUSndLength
 751 02b0 0346     		mov	r3, r0
 752 02b2 2846     		mov	r0, r5
 753 02b4 2146     		mov	r1, r4
 754 02b6 1A46     		mov	r2, r3
 755 02b8 FFF7FEFF 		bl	vMBMasterErrorCBRespondTimeout
 355:../FreeModbus/mb_m.c **** 						ucMBFrame, usMBMasterGetPDUSndLength());
 356:../FreeModbus/mb_m.c **** 				break;
 756              		.loc 1 356 0
 757 02bc 23E0     		b	.L48
 758              	.L49:
 357:../FreeModbus/mb_m.c **** 			case EV_ERROR_RECEIVE_DATA:
 358:../FreeModbus/mb_m.c **** 				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 759              		.loc 1 358 0
 760 02be FFF7FEFF 		bl	ucMBMasterGetDestAddress
 761 02c2 0346     		mov	r3, r0
 762 02c4 1D46     		mov	r5, r3
 763 02c6 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 764 02ca C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 765 02ce 1C68     		ldr	r4, [r3]
 766 02d0 FFF7FEFF 		bl	usMBMasterGetPDUSndLength
 767 02d4 0346     		mov	r3, r0
 768 02d6 2846     		mov	r0, r5
 769 02d8 2146     		mov	r1, r4
 770 02da 1A46     		mov	r2, r3
 771 02dc FFF7FEFF 		bl	vMBMasterErrorCBReceiveData
 359:../FreeModbus/mb_m.c **** 						ucMBFrame, usMBMasterGetPDUSndLength());
 360:../FreeModbus/mb_m.c **** 				break;
 772              		.loc 1 360 0
 773 02e0 11E0     		b	.L48
 774              	.L50:
 361:../FreeModbus/mb_m.c **** 			case EV_ERROR_EXECUTE_FUNCTION:
 362:../FreeModbus/mb_m.c **** 				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 775              		.loc 1 362 0
 776 02e2 FFF7FEFF 		bl	ucMBMasterGetDestAddress
 777 02e6 0346     		mov	r3, r0
 778 02e8 1D46     		mov	r5, r3
 779 02ea 40F20003 		movw	r3, #:lower16:ucMBFrame.6313
 780 02ee C0F20003 		movt	r3, #:upper16:ucMBFrame.6313
 781 02f2 1C68     		ldr	r4, [r3]
 782 02f4 FFF7FEFF 		bl	usMBMasterGetPDUSndLength
 783 02f8 0346     		mov	r3, r0
 784 02fa 2846     		mov	r0, r5
 785 02fc 2146     		mov	r1, r4
 786 02fe 1A46     		mov	r2, r3
 787 0300 FFF7FEFF 		bl	vMBMasterErrorCBExecuteFunction
 363:../FreeModbus/mb_m.c **** 						ucMBFrame, usMBMasterGetPDUSndLength());
 364:../FreeModbus/mb_m.c **** 				break;
 788              		.loc 1 364 0
 789 0304 00BF     		nop
 790              	.L48:
 365:../FreeModbus/mb_m.c **** 			}
 366:../FreeModbus/mb_m.c **** 			vMBMasterRunResRelease();
 791              		.loc 1 366 0
 792 0306 FFF7FEFF 		bl	vMBMasterRunResRelease
 367:../FreeModbus/mb_m.c ****         	break;
 793              		.loc 1 367 0
 794 030a 00BF     		nop
 795              	.L27:
 368:../FreeModbus/mb_m.c ****         }
 369:../FreeModbus/mb_m.c ****     }
 370:../FreeModbus/mb_m.c ****     return MB_ENOERR;
 796              		.loc 1 370 0
 797 030c 0023     		movs	r3, #0
 798              	.L52:
 371:../FreeModbus/mb_m.c **** }
 799              		.loc 1 371 0
 800 030e 1846     		mov	r0, r3
 801 0310 1437     		adds	r7, r7, #20
 802 0312 BD46     		mov	sp, r7
 803              		@ sp needed
 804 0314 F0BD     		pop	{r4, r5, r6, r7, pc}
 805              		.cfi_endproc
 806              	.LFE33:
 808 0316 00BF     		.section	.text.xMBMasterGetCBRunInMasterMode,"ax",%progbits
 809              		.align	2
 810              		.global	xMBMasterGetCBRunInMasterMode
 811              		.thumb
 812              		.thumb_func
 814              	xMBMasterGetCBRunInMasterMode:
 815              	.LFB34:
 372:../FreeModbus/mb_m.c **** 
 373:../FreeModbus/mb_m.c **** /* Get whether the Modbus Master is run in master mode.*/
 374:../FreeModbus/mb_m.c **** BOOL xMBMasterGetCBRunInMasterMode( void )
 375:../FreeModbus/mb_m.c **** {
 816              		.loc 1 375 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821 0000 80B4     		push	{r7}
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 00AF     		add	r7, sp, #0
 825              		.cfi_def_cfa_register 7
 376:../FreeModbus/mb_m.c **** 	return xMBRunInMasterMode;
 826              		.loc 1 376 0
 827 0004 40F20003 		movw	r3, #:lower16:xMBRunInMasterMode
 828 0008 C0F20003 		movt	r3, #:upper16:xMBRunInMasterMode
 829 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 377:../FreeModbus/mb_m.c **** }
 830              		.loc 1 377 0
 831 000e 1846     		mov	r0, r3
 832 0010 BD46     		mov	sp, r7
 833              		@ sp needed
 834 0012 5DF8047B 		ldr	r7, [sp], #4
 835 0016 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE34:
 839              		.section	.text.vMBMasterSetCBRunInMasterMode,"ax",%progbits
 840              		.align	2
 841              		.global	vMBMasterSetCBRunInMasterMode
 842              		.thumb
 843              		.thumb_func
 845              	vMBMasterSetCBRunInMasterMode:
 846              	.LFB35:
 378:../FreeModbus/mb_m.c **** /* Set whether the Modbus Master is run in master mode.*/
 379:../FreeModbus/mb_m.c **** void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
 380:../FreeModbus/mb_m.c **** {
 847              		.loc 1 380 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 8
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852 0000 80B4     		push	{r7}
 853              		.cfi_def_cfa_offset 4
 854              		.cfi_offset 7, -4
 855 0002 83B0     		sub	sp, sp, #12
 856              		.cfi_def_cfa_offset 16
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 0346     		mov	r3, r0
 860 0008 FB71     		strb	r3, [r7, #7]
 381:../FreeModbus/mb_m.c **** 	xMBRunInMasterMode = IsMasterMode;
 861              		.loc 1 381 0
 862 000a 40F20003 		movw	r3, #:lower16:xMBRunInMasterMode
 863 000e C0F20003 		movt	r3, #:upper16:xMBRunInMasterMode
 864 0012 FA79     		ldrb	r2, [r7, #7]
 865 0014 1A70     		strb	r2, [r3]
 382:../FreeModbus/mb_m.c **** }
 866              		.loc 1 382 0
 867 0016 0C37     		adds	r7, r7, #12
 868 0018 BD46     		mov	sp, r7
 869              		@ sp needed
 870 001a 5DF8047B 		ldr	r7, [sp], #4
 871 001e 7047     		bx	lr
 872              		.cfi_endproc
 873              	.LFE35:
 875              		.section	.text.ucMBMasterGetDestAddress,"ax",%progbits
 876              		.align	2
 877              		.global	ucMBMasterGetDestAddress
 878              		.thumb
 879              		.thumb_func
 881              	ucMBMasterGetDestAddress:
 882              	.LFB36:
 383:../FreeModbus/mb_m.c **** /* Get Modbus Master send destination address. */
 384:../FreeModbus/mb_m.c **** UCHAR ucMBMasterGetDestAddress( void )
 385:../FreeModbus/mb_m.c **** {
 883              		.loc 1 385 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 80B4     		push	{r7}
 889              		.cfi_def_cfa_offset 4
 890              		.cfi_offset 7, -4
 891 0002 00AF     		add	r7, sp, #0
 892              		.cfi_def_cfa_register 7
 386:../FreeModbus/mb_m.c **** 	return ucMBMasterDestAddress;
 893              		.loc 1 386 0
 894 0004 40F20003 		movw	r3, #:lower16:ucMBMasterDestAddress
 895 0008 C0F20003 		movt	r3, #:upper16:ucMBMasterDestAddress
 896 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 387:../FreeModbus/mb_m.c **** }
 897              		.loc 1 387 0
 898 000e 1846     		mov	r0, r3
 899 0010 BD46     		mov	sp, r7
 900              		@ sp needed
 901 0012 5DF8047B 		ldr	r7, [sp], #4
 902 0016 7047     		bx	lr
 903              		.cfi_endproc
 904              	.LFE36:
 906              		.section	.text.vMBMasterSetDestAddress,"ax",%progbits
 907              		.align	2
 908              		.global	vMBMasterSetDestAddress
 909              		.thumb
 910              		.thumb_func
 912              	vMBMasterSetDestAddress:
 913              	.LFB37:
 388:../FreeModbus/mb_m.c **** /* Set Modbus Master send destination address. */
 389:../FreeModbus/mb_m.c **** void vMBMasterSetDestAddress( UCHAR Address )
 390:../FreeModbus/mb_m.c **** {
 914              		.loc 1 390 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 8
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918              		@ link register save eliminated.
 919 0000 80B4     		push	{r7}
 920              		.cfi_def_cfa_offset 4
 921              		.cfi_offset 7, -4
 922 0002 83B0     		sub	sp, sp, #12
 923              		.cfi_def_cfa_offset 16
 924 0004 00AF     		add	r7, sp, #0
 925              		.cfi_def_cfa_register 7
 926 0006 0346     		mov	r3, r0
 927 0008 FB71     		strb	r3, [r7, #7]
 391:../FreeModbus/mb_m.c **** 	ucMBMasterDestAddress = Address;
 928              		.loc 1 391 0
 929 000a 40F20003 		movw	r3, #:lower16:ucMBMasterDestAddress
 930 000e C0F20003 		movt	r3, #:upper16:ucMBMasterDestAddress
 931 0012 FA79     		ldrb	r2, [r7, #7]
 932 0014 1A70     		strb	r2, [r3]
 392:../FreeModbus/mb_m.c **** }
 933              		.loc 1 392 0
 934 0016 0C37     		adds	r7, r7, #12
 935 0018 BD46     		mov	sp, r7
 936              		@ sp needed
 937 001a 5DF8047B 		ldr	r7, [sp], #4
 938 001e 7047     		bx	lr
 939              		.cfi_endproc
 940              	.LFE37:
 942              		.section	.text.eMBMasterGetErrorType,"ax",%progbits
 943              		.align	2
 944              		.global	eMBMasterGetErrorType
 945              		.thumb
 946              		.thumb_func
 948              	eMBMasterGetErrorType:
 949              	.LFB38:
 393:../FreeModbus/mb_m.c **** /* Get Modbus Master current error event type. */
 394:../FreeModbus/mb_m.c **** eMBMasterErrorEventType eMBMasterGetErrorType( void )
 395:../FreeModbus/mb_m.c **** {
 950              		.loc 1 395 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 0000 80B4     		push	{r7}
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 7, -4
 958 0002 00AF     		add	r7, sp, #0
 959              		.cfi_def_cfa_register 7
 396:../FreeModbus/mb_m.c **** 	return eMBMasterCurErrorType;
 960              		.loc 1 396 0
 961 0004 40F20003 		movw	r3, #:lower16:eMBMasterCurErrorType
 962 0008 C0F20003 		movt	r3, #:upper16:eMBMasterCurErrorType
 963 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 397:../FreeModbus/mb_m.c **** }
 964              		.loc 1 397 0
 965 000e 1846     		mov	r0, r3
 966 0010 BD46     		mov	sp, r7
 967              		@ sp needed
 968 0012 5DF8047B 		ldr	r7, [sp], #4
 969 0016 7047     		bx	lr
 970              		.cfi_endproc
 971              	.LFE38:
 973              		.section	.text.vMBMasterSetErrorType,"ax",%progbits
 974              		.align	2
 975              		.global	vMBMasterSetErrorType
 976              		.thumb
 977              		.thumb_func
 979              	vMBMasterSetErrorType:
 980              	.LFB39:
 398:../FreeModbus/mb_m.c **** /* Set Modbus Master current error event type. */
 399:../FreeModbus/mb_m.c **** void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
 400:../FreeModbus/mb_m.c **** {
 981              		.loc 1 400 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 8
 984              		@ frame_needed = 1, uses_anonymous_args = 0
 985              		@ link register save eliminated.
 986 0000 80B4     		push	{r7}
 987              		.cfi_def_cfa_offset 4
 988              		.cfi_offset 7, -4
 989 0002 83B0     		sub	sp, sp, #12
 990              		.cfi_def_cfa_offset 16
 991 0004 00AF     		add	r7, sp, #0
 992              		.cfi_def_cfa_register 7
 993 0006 0346     		mov	r3, r0
 994 0008 FB71     		strb	r3, [r7, #7]
 401:../FreeModbus/mb_m.c **** 	eMBMasterCurErrorType = errorType;
 995              		.loc 1 401 0
 996 000a 40F20003 		movw	r3, #:lower16:eMBMasterCurErrorType
 997 000e C0F20003 		movt	r3, #:upper16:eMBMasterCurErrorType
 998 0012 FA79     		ldrb	r2, [r7, #7]
 999 0014 1A70     		strb	r2, [r3]
 402:../FreeModbus/mb_m.c **** }
 1000              		.loc 1 402 0
 1001 0016 0C37     		adds	r7, r7, #12
 1002 0018 BD46     		mov	sp, r7
 1003              		@ sp needed
 1004 001a 5DF8047B 		ldr	r7, [sp], #4
 1005 001e 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE39:
 1009              		.section	.bss.ucRcvAddress.6314,"aw",%nobits
 1012              	ucRcvAddress.6314:
 1013 0000 00       		.space	1
 1014              		.section	.bss.ucMBFrame.6313,"aw",%nobits
 1015              		.align	2
 1018              	ucMBFrame.6313:
 1019 0000 00000000 		.space	4
 1020              		.section	.bss.usLength.6316,"aw",%nobits
 1021              		.align	1
 1024              	usLength.6316:
 1025 0000 0000     		.space	2
 1026              		.section	.bss.ucFunctionCode.6315,"aw",%nobits
 1029              	ucFunctionCode.6315:
 1030 0000 00       		.space	1
 1031              		.section	.bss.eException.6317,"aw",%nobits
 1034              	eException.6317:
 1035 0000 00       		.space	1
 1036              		.text
 1037              	.Letext0:
 1038              		.file 2 "c:\\tools\\arm-none-eabi\\include\\stdint.h"
 1039              		.file 3 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\stm32/port.h"
 1040              		.file 4 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbport.h"
 1041              		.file 5 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbproto.h"
 1042              		.file 6 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mb.h"
 1043              		.file 7 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbframe.h"
 1044              		.file 8 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\Libraries\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mb_m.c
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:21     .bss.ucMBMasterDestAddress:00000000 ucMBMasterDestAddress
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:22     .bss.ucMBMasterDestAddress:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:26     .bss.xMBRunInMasterMode:00000000 xMBRunInMasterMode
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:27     .bss.xMBRunInMasterMode:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:31     .bss.eMBMasterCurErrorType:00000000 eMBMasterCurErrorType
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:32     .bss.eMBMasterCurErrorType:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:36     .data.eMBState:00000000 eMBState
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:39     .bss.peMBMasterFrameSendCur:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:42     .bss.peMBMasterFrameSendCur:00000000 peMBMasterFrameSendCur
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:45     .bss.pvMBMasterFrameStartCur:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:48     .bss.pvMBMasterFrameStartCur:00000000 pvMBMasterFrameStartCur
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:51     .bss.pvMBMasterFrameStopCur:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:54     .bss.pvMBMasterFrameStopCur:00000000 pvMBMasterFrameStopCur
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:57     .bss.peMBMasterFrameReceiveCur:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:60     .bss.peMBMasterFrameReceiveCur:00000000 peMBMasterFrameReceiveCur
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:63     .bss.pvMBMasterFrameCloseCur:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:66     .bss.pvMBMasterFrameCloseCur:00000000 pvMBMasterFrameCloseCur
                            *COM*:00000004 pxMBMasterFrameCBByteReceived
                            *COM*:00000004 pxMBMasterFrameCBTransmitterEmpty
                            *COM*:00000004 pxMBMasterPortCBTimerExpired
                            *COM*:00000004 pxMBMasterFrameCBReceiveFSMCur
                            *COM*:00000004 pxMBMasterFrameCBTransmitFSMCur
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:74     .data.xMasterFuncHandlers:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:77     .data.xMasterFuncHandlers:00000000 xMasterFuncHandlers
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:110    .text.eMBMasterInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:115    .text.eMBMasterInit:00000000 eMBMasterInit
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:243    .text.eMBMasterClose:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:248    .text.eMBMasterClose:00000000 eMBMasterClose
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:300    .text.eMBMasterEnable:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:305    .text.eMBMasterEnable:00000000 eMBMasterEnable
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:356    .text.eMBMasterDisable:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:361    .text.eMBMasterDisable:00000000 eMBMasterDisable
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:423    .text.eMBMasterPoll:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:428    .text.eMBMasterPoll:00000000 eMBMasterPoll
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:474    .text.eMBMasterPoll:0000003c $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:492    .text.eMBMasterPoll:0000007c $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1012   .bss.ucRcvAddress.6314:00000000 ucRcvAddress.6314
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1018   .bss.ucMBFrame.6313:00000000 ucMBFrame.6313
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1024   .bss.usLength.6316:00000000 usLength.6316
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:881    .text.ucMBMasterGetDestAddress:00000000 ucMBMasterGetDestAddress
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:979    .text.vMBMasterSetErrorType:00000000 vMBMasterSetErrorType
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1029   .bss.ucFunctionCode.6315:00000000 ucFunctionCode.6315
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1034   .bss.eException.6317:00000000 eException.6317
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:845    .text.vMBMasterSetCBRunInMasterMode:00000000 vMBMasterSetCBRunInMasterMode
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:912    .text.vMBMasterSetDestAddress:00000000 vMBMasterSetDestAddress
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:948    .text.eMBMasterGetErrorType:00000000 eMBMasterGetErrorType
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:809    .text.xMBMasterGetCBRunInMasterMode:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:814    .text.xMBMasterGetCBRunInMasterMode:00000000 xMBMasterGetCBRunInMasterMode
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:840    .text.vMBMasterSetCBRunInMasterMode:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:876    .text.ucMBMasterGetDestAddress:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:907    .text.vMBMasterSetDestAddress:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:943    .text.eMBMasterGetErrorType:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:974    .text.vMBMasterSetErrorType:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1013   .bss.ucRcvAddress.6314:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1015   .bss.ucMBFrame.6313:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1021   .bss.usLength.6316:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1030   .bss.ucFunctionCode.6315:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccd5q4tV.s:1035   .bss.eException.6317:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.98ffea2db242cfdb58f411f7407f2b59
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.18.8bab2fb43ac4e90235390733c30a4530
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.7091a050e07f1c4abd225630fe3d62f1
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stm32f10x_conf.h.2.f1a8c33f0a763aeef696fee38b2b2dbc
                           .group:00000000 wm4.mbconfig.h.33.2e295d4ff98bc723e2405a40490b5ddb
                           .group:00000000 wm4.assert.h.11.060c3dc511517628fd4f958fa9448dce
                           .group:00000000 wm4.inttypes.h.14.48280a9a5aa6f2f2d5302e2988897736
                           .group:00000000 wm4.inttypes.h.24.8137491c6995c2cb5d25f9bab92d7f64
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.portmacro.h.56.a47bdd86bc36d334ca6056492e2d709f
                           .group:00000000 wm4.port.h.38.a8cf679bb58c5ad1b387e726c220530e
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mb_m.h.32.f0c90bdd8de56a09521e2eefafb4f11f
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c

UNDEFINED SYMBOLS
eMBFuncReportSlaveID
eMBMasterFuncReadInputRegister
eMBMasterFuncReadHoldingRegister
eMBMasterFuncWriteMultipleHoldingRegister
eMBMasterFuncWriteHoldingRegister
eMBMasterFuncReadWriteMultipleHoldingRegister
eMBMasterFuncReadCoils
eMBMasterFuncWriteCoil
eMBMasterFuncWriteMultipleCoils
eMBMasterFuncReadDiscreteInputs
eMBMasterRTUStart
eMBMasterRTUStop
eMBMasterRTUSend
eMBMasterRTUReceive
xMBMasterRTUReceiveFSM
xMBMasterRTUTransmitFSM
xMBMasterRTUTimerExpired
eMBMasterRTUInit
xMBMasterPortEventInit
vMBMasterOsResInit
xMBMasterPortEventGet
xMBMasterPortEventPost
xMBMasterRequestIsBroadcast
usMBMasterGetPDUSndLength
vMBMasterCBRequestSuccess
vMBMasterRunResRelease
vMBMasterGetPDUSndBuf
vMBMasterErrorCBRespondTimeout
vMBMasterErrorCBReceiveData
vMBMasterErrorCBExecuteFunction

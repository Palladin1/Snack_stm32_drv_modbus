   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mbfuncdisc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.eMBFuncReadDiscreteInputs,"ax",%progbits
  19              		.align	2
  20              		.global	eMBFuncReadDiscreteInputs
  21              		.thumb
  22              		.thumb_func
  24              	eMBFuncReadDiscreteInputs:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/functions/mbfuncdisc.c"
   1:../FreeModbus/functions/mbfuncdisc.c ****  /*
   2:../FreeModbus/functions/mbfuncdisc.c ****   * FreeRTOS Modbus Libary: A Modbus serial implementation for FreeRTOS
   3:../FreeModbus/functions/mbfuncdisc.c ****   * Copyright (C) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/functions/mbfuncdisc.c ****   *
   5:../FreeModbus/functions/mbfuncdisc.c ****   * This library is free software; you can redistribute it and/or
   6:../FreeModbus/functions/mbfuncdisc.c ****   * modify it under the terms of the GNU Lesser General Public
   7:../FreeModbus/functions/mbfuncdisc.c ****   * License as published by the Free Software Foundation; either
   8:../FreeModbus/functions/mbfuncdisc.c ****   * version 2.1 of the License, or (at your option) any later version.
   9:../FreeModbus/functions/mbfuncdisc.c ****   *
  10:../FreeModbus/functions/mbfuncdisc.c ****   * This library is distributed in the hope that it will be useful,
  11:../FreeModbus/functions/mbfuncdisc.c ****   * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:../FreeModbus/functions/mbfuncdisc.c ****   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:../FreeModbus/functions/mbfuncdisc.c ****   * Lesser General Public License for more details.
  14:../FreeModbus/functions/mbfuncdisc.c ****   *
  15:../FreeModbus/functions/mbfuncdisc.c ****   * You should have received a copy of the GNU Lesser General Public
  16:../FreeModbus/functions/mbfuncdisc.c ****   * License along with this library; if not, write to the Free Software
  17:../FreeModbus/functions/mbfuncdisc.c ****   * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:../FreeModbus/functions/mbfuncdisc.c ****   */
  19:../FreeModbus/functions/mbfuncdisc.c **** 
  20:../FreeModbus/functions/mbfuncdisc.c **** 
  21:../FreeModbus/functions/mbfuncdisc.c **** 
  22:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- System includes ----------------------------------*/
  23:../FreeModbus/functions/mbfuncdisc.c **** #include "stdlib.h"
  24:../FreeModbus/functions/mbfuncdisc.c **** #include "string.h"
  25:../FreeModbus/functions/mbfuncdisc.c **** 
  26:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Platform includes --------------------------------*/
  27:../FreeModbus/functions/mbfuncdisc.c **** #include "port.h"
  28:../FreeModbus/functions/mbfuncdisc.c **** 
  29:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Modbus includes ----------------------------------*/
  30:../FreeModbus/functions/mbfuncdisc.c **** #include "mb.h"
  31:../FreeModbus/functions/mbfuncdisc.c **** #include "mbframe.h"
  32:../FreeModbus/functions/mbfuncdisc.c **** #include "mbproto.h"
  33:../FreeModbus/functions/mbfuncdisc.c **** #include "mbconfig.h"
  34:../FreeModbus/functions/mbfuncdisc.c **** 
  35:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Defines ------------------------------------------*/
  36:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
  37:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  38:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_SIZE               ( 4 )
  39:../FreeModbus/functions/mbfuncdisc.c **** #define MB_PDU_FUNC_READ_DISCCNT_MAX        ( 0x07D0 )
  40:../FreeModbus/functions/mbfuncdisc.c **** 
  41:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Static functions ---------------------------------*/
  42:../FreeModbus/functions/mbfuncdisc.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  43:../FreeModbus/functions/mbfuncdisc.c **** 
  44:../FreeModbus/functions/mbfuncdisc.c **** /* ----------------------- Start implementation -----------------------------*/
  45:../FreeModbus/functions/mbfuncdisc.c **** 
  46:../FreeModbus/functions/mbfuncdisc.c **** #if MB_FUNC_READ_COILS_ENABLED > 0
  47:../FreeModbus/functions/mbfuncdisc.c **** 
  48:../FreeModbus/functions/mbfuncdisc.c **** eMBException
  49:../FreeModbus/functions/mbfuncdisc.c **** eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
  50:../FreeModbus/functions/mbfuncdisc.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              		.cfi_def_cfa_offset 32
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  51:../FreeModbus/functions/mbfuncdisc.c ****     USHORT          usRegAddress;
  52:../FreeModbus/functions/mbfuncdisc.c ****     USHORT          usDiscreteCnt;
  53:../FreeModbus/functions/mbfuncdisc.c ****     UCHAR           ucNBytes;
  54:../FreeModbus/functions/mbfuncdisc.c ****     UCHAR          *pucFrameCur;
  55:../FreeModbus/functions/mbfuncdisc.c **** 
  56:../FreeModbus/functions/mbfuncdisc.c ****     eMBException    eStatus = MB_EX_NONE;
  41              		.loc 1 56 0
  42 000a 0023     		movs	r3, #0
  43 000c BB75     		strb	r3, [r7, #22]
  57:../FreeModbus/functions/mbfuncdisc.c ****     eMBErrorCode    eRegStatus;
  58:../FreeModbus/functions/mbfuncdisc.c **** 
  59:../FreeModbus/functions/mbfuncdisc.c ****     if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
  44              		.loc 1 59 0
  45 000e 3B68     		ldr	r3, [r7]
  46 0010 1B88     		ldrh	r3, [r3]
  47 0012 052B     		cmp	r3, #5
  48 0014 6CD1     		bne	.L2
  60:../FreeModbus/functions/mbfuncdisc.c ****     {
  61:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
  49              		.loc 1 61 0
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 0133     		adds	r3, r3, #1
  52 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  53 001c 1B02     		lsls	r3, r3, #8
  54 001e BB82     		strh	r3, [r7, #20]	@ movhi
  62:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
  55              		.loc 1 62 0
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 0233     		adds	r3, r3, #2
  58 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59 0026 1A46     		mov	r2, r3
  60 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
  61 002a 1343     		orrs	r3, r3, r2
  62 002c BB82     		strh	r3, [r7, #20]	@ movhi
  63:../FreeModbus/functions/mbfuncdisc.c ****         usRegAddress++;
  63              		.loc 1 63 0
  64 002e BB8A     		ldrh	r3, [r7, #20]
  65 0030 0133     		adds	r3, r3, #1
  66 0032 BB82     		strh	r3, [r7, #20]	@ movhi
  64:../FreeModbus/functions/mbfuncdisc.c **** 
  65:../FreeModbus/functions/mbfuncdisc.c ****         usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
  67              		.loc 1 65 0
  68 0034 7B68     		ldr	r3, [r7, #4]
  69 0036 0333     		adds	r3, r3, #3
  70 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  71 003a 1B02     		lsls	r3, r3, #8
  72 003c 7B82     		strh	r3, [r7, #18]	@ movhi
  66:../FreeModbus/functions/mbfuncdisc.c ****         usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
  73              		.loc 1 66 0
  74 003e 7B68     		ldr	r3, [r7, #4]
  75 0040 0433     		adds	r3, r3, #4
  76 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  77 0044 1A46     		mov	r2, r3
  78 0046 7B8A     		ldrh	r3, [r7, #18]	@ movhi
  79 0048 1343     		orrs	r3, r3, r2
  80 004a 7B82     		strh	r3, [r7, #18]	@ movhi
  67:../FreeModbus/functions/mbfuncdisc.c **** 
  68:../FreeModbus/functions/mbfuncdisc.c ****         /* Check if the number of registers to read is valid. If not
  69:../FreeModbus/functions/mbfuncdisc.c ****          * return Modbus illegal data value exception. 
  70:../FreeModbus/functions/mbfuncdisc.c ****          */
  71:../FreeModbus/functions/mbfuncdisc.c ****         if( ( usDiscreteCnt >= 1 ) &&
  81              		.loc 1 71 0
  82 004c 7B8A     		ldrh	r3, [r7, #18]
  83 004e 002B     		cmp	r3, #0
  84 0050 4AD0     		beq	.L3
  85              		.loc 1 71 0 is_stmt 0 discriminator 1
  86 0052 7B8A     		ldrh	r3, [r7, #18]
  87 0054 B3F5FA6F 		cmp	r3, #2000
  88 0058 46D2     		bcs	.L3
  72:../FreeModbus/functions/mbfuncdisc.c ****             ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
  73:../FreeModbus/functions/mbfuncdisc.c ****         {
  74:../FreeModbus/functions/mbfuncdisc.c ****             /* Set the current PDU data pointer to the beginning. */
  75:../FreeModbus/functions/mbfuncdisc.c ****             pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
  89              		.loc 1 75 0 is_stmt 1
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c FB60     		str	r3, [r7, #12]
  76:../FreeModbus/functions/mbfuncdisc.c ****             *usLen = MB_PDU_FUNC_OFF;
  92              		.loc 1 76 0
  93 005e 3B68     		ldr	r3, [r7]
  94 0060 0022     		movs	r2, #0
  95 0062 1A80     		strh	r2, [r3]	@ movhi
  77:../FreeModbus/functions/mbfuncdisc.c **** 
  78:../FreeModbus/functions/mbfuncdisc.c ****             /* First byte contains the function code. */
  79:../FreeModbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
  96              		.loc 1 79 0
  97 0064 FB68     		ldr	r3, [r7, #12]
  98 0066 5A1C     		adds	r2, r3, #1
  99 0068 FA60     		str	r2, [r7, #12]
 100 006a 0222     		movs	r2, #2
 101 006c 1A70     		strb	r2, [r3]
  80:../FreeModbus/functions/mbfuncdisc.c ****             *usLen += 1;
 102              		.loc 1 80 0
 103 006e 3B68     		ldr	r3, [r7]
 104 0070 1B88     		ldrh	r3, [r3]
 105 0072 0133     		adds	r3, r3, #1
 106 0074 9AB2     		uxth	r2, r3
 107 0076 3B68     		ldr	r3, [r7]
 108 0078 1A80     		strh	r2, [r3]	@ movhi
  81:../FreeModbus/functions/mbfuncdisc.c **** 
  82:../FreeModbus/functions/mbfuncdisc.c ****             /* Test if the quantity of coils is a multiple of 8. If not last
  83:../FreeModbus/functions/mbfuncdisc.c ****              * byte is only partially field with unused coils set to zero. */
  84:../FreeModbus/functions/mbfuncdisc.c ****             if( ( usDiscreteCnt & 0x0007 ) != 0 )
 109              		.loc 1 84 0
 110 007a 7B8A     		ldrh	r3, [r7, #18]
 111 007c 03F00703 		and	r3, r3, #7
 112 0080 002B     		cmp	r3, #0
 113 0082 06D0     		beq	.L4
  85:../FreeModbus/functions/mbfuncdisc.c ****             {
  86:../FreeModbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 114              		.loc 1 86 0
 115 0084 7B8A     		ldrh	r3, [r7, #18]
 116 0086 DB08     		lsrs	r3, r3, #3
 117 0088 9BB2     		uxth	r3, r3
 118 008a DBB2     		uxtb	r3, r3
 119 008c 0133     		adds	r3, r3, #1
 120 008e FB75     		strb	r3, [r7, #23]
 121 0090 03E0     		b	.L5
 122              	.L4:
  87:../FreeModbus/functions/mbfuncdisc.c ****             }
  88:../FreeModbus/functions/mbfuncdisc.c ****             else
  89:../FreeModbus/functions/mbfuncdisc.c ****             {
  90:../FreeModbus/functions/mbfuncdisc.c ****                 ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 123              		.loc 1 90 0
 124 0092 7B8A     		ldrh	r3, [r7, #18]
 125 0094 DB08     		lsrs	r3, r3, #3
 126 0096 9BB2     		uxth	r3, r3
 127 0098 FB75     		strb	r3, [r7, #23]
 128              	.L5:
  91:../FreeModbus/functions/mbfuncdisc.c ****             }
  92:../FreeModbus/functions/mbfuncdisc.c ****             *pucFrameCur++ = ucNBytes;
 129              		.loc 1 92 0
 130 009a FB68     		ldr	r3, [r7, #12]
 131 009c 5A1C     		adds	r2, r3, #1
 132 009e FA60     		str	r2, [r7, #12]
 133 00a0 FA7D     		ldrb	r2, [r7, #23]
 134 00a2 1A70     		strb	r2, [r3]
  93:../FreeModbus/functions/mbfuncdisc.c ****             *usLen += 1;
 135              		.loc 1 93 0
 136 00a4 3B68     		ldr	r3, [r7]
 137 00a6 1B88     		ldrh	r3, [r3]
 138 00a8 0133     		adds	r3, r3, #1
 139 00aa 9AB2     		uxth	r2, r3
 140 00ac 3B68     		ldr	r3, [r7]
 141 00ae 1A80     		strh	r2, [r3]	@ movhi
  94:../FreeModbus/functions/mbfuncdisc.c **** 
  95:../FreeModbus/functions/mbfuncdisc.c ****             eRegStatus =
 142              		.loc 1 95 0
 143 00b0 BA8A     		ldrh	r2, [r7, #20]
 144 00b2 7B8A     		ldrh	r3, [r7, #18]
 145 00b4 F868     		ldr	r0, [r7, #12]
 146 00b6 1146     		mov	r1, r2
 147 00b8 1A46     		mov	r2, r3
 148 00ba FFF7FEFF 		bl	eMBRegDiscreteCB
 149 00be 0346     		mov	r3, r0
 150 00c0 FB72     		strb	r3, [r7, #11]
  96:../FreeModbus/functions/mbfuncdisc.c ****                 eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
  97:../FreeModbus/functions/mbfuncdisc.c **** 
  98:../FreeModbus/functions/mbfuncdisc.c ****             /* If an error occured convert it into a Modbus exception. */
  99:../FreeModbus/functions/mbfuncdisc.c ****             if( eRegStatus != MB_ENOERR )
 151              		.loc 1 99 0
 152 00c2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 153 00c4 002B     		cmp	r3, #0
 154 00c6 06D0     		beq	.L6
 100:../FreeModbus/functions/mbfuncdisc.c ****             {
 101:../FreeModbus/functions/mbfuncdisc.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 155              		.loc 1 101 0
 156 00c8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 157 00ca 1846     		mov	r0, r3
 158 00cc FFF7FEFF 		bl	prveMBError2Exception
 159 00d0 0346     		mov	r3, r0
 160 00d2 BB75     		strb	r3, [r7, #22]
  99:../FreeModbus/functions/mbfuncdisc.c ****             {
 161              		.loc 1 99 0
 162 00d4 0BE0     		b	.L8
 163              	.L6:
 102:../FreeModbus/functions/mbfuncdisc.c ****             }
 103:../FreeModbus/functions/mbfuncdisc.c ****             else
 104:../FreeModbus/functions/mbfuncdisc.c ****             {
 105:../FreeModbus/functions/mbfuncdisc.c ****                 /* The response contains the function code, the starting address
 106:../FreeModbus/functions/mbfuncdisc.c ****                  * and the quantity of registers. We reuse the old values in the 
 107:../FreeModbus/functions/mbfuncdisc.c ****                  * buffer because they are still valid. */
 108:../FreeModbus/functions/mbfuncdisc.c ****                 *usLen += ucNBytes;;
 164              		.loc 1 108 0
 165 00d6 3B68     		ldr	r3, [r7]
 166 00d8 1A88     		ldrh	r2, [r3]
 167 00da FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 168 00dc 9BB2     		uxth	r3, r3
 169 00de 1344     		add	r3, r3, r2
 170 00e0 9AB2     		uxth	r2, r3
 171 00e2 3B68     		ldr	r3, [r7]
 172 00e4 1A80     		strh	r2, [r3]	@ movhi
  99:../FreeModbus/functions/mbfuncdisc.c ****             {
 173              		.loc 1 99 0
 174 00e6 02E0     		b	.L8
 175              	.L3:
 109:../FreeModbus/functions/mbfuncdisc.c ****             }
 110:../FreeModbus/functions/mbfuncdisc.c ****         }
 111:../FreeModbus/functions/mbfuncdisc.c ****         else
 112:../FreeModbus/functions/mbfuncdisc.c ****         {
 113:../FreeModbus/functions/mbfuncdisc.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 176              		.loc 1 113 0
 177 00e8 0323     		movs	r3, #3
 178 00ea BB75     		strb	r3, [r7, #22]
 179 00ec 02E0     		b	.L9
 180              	.L8:
 181 00ee 01E0     		b	.L9
 182              	.L2:
 114:../FreeModbus/functions/mbfuncdisc.c ****         }
 115:../FreeModbus/functions/mbfuncdisc.c ****     }
 116:../FreeModbus/functions/mbfuncdisc.c ****     else
 117:../FreeModbus/functions/mbfuncdisc.c ****     {
 118:../FreeModbus/functions/mbfuncdisc.c ****         /* Can't be a valid read coil register request because the length
 119:../FreeModbus/functions/mbfuncdisc.c ****          * is incorrect. */
 120:../FreeModbus/functions/mbfuncdisc.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 183              		.loc 1 120 0
 184 00f0 0323     		movs	r3, #3
 185 00f2 BB75     		strb	r3, [r7, #22]
 186              	.L9:
 121:../FreeModbus/functions/mbfuncdisc.c ****     }
 122:../FreeModbus/functions/mbfuncdisc.c ****     return eStatus;
 187              		.loc 1 122 0
 188 00f4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 123:../FreeModbus/functions/mbfuncdisc.c **** }
 189              		.loc 1 123 0
 190 00f6 1846     		mov	r0, r3
 191 00f8 1837     		adds	r7, r7, #24
 192 00fa BD46     		mov	sp, r7
 193              		@ sp needed
 194 00fc 80BD     		pop	{r7, pc}
 195              		.cfi_endproc
 196              	.LFE29:
 198 00fe 00BF     		.text
 199              	.Letext0:
 200              		.file 2 "c:\\tools\\arm-none-eabi\\include\\stdint.h"
 201              		.file 3 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\stm32/port.h"
 202              		.file 4 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbproto.h"
 203              		.file 5 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mb.h"
 204              		.file 6 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\Libraries\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbfuncdisc.c
C:\Users\Alex\AppData\Local\Temp\ccY62ArF.s:19     .text.eMBFuncReadDiscreteInputs:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccY62ArF.s:24     .text.eMBFuncReadDiscreteInputs:00000000 eMBFuncReadDiscreteInputs
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.98ffea2db242cfdb58f411f7407f2b59
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.18.8bab2fb43ac4e90235390733c30a4530
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.7091a050e07f1c4abd225630fe3d62f1
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stm32f10x_conf.h.2.f1a8c33f0a763aeef696fee38b2b2dbc
                           .group:00000000 wm4.mbconfig.h.33.2e295d4ff98bc723e2405a40490b5ddb
                           .group:00000000 wm4.assert.h.11.060c3dc511517628fd4f958fa9448dce
                           .group:00000000 wm4.inttypes.h.14.48280a9a5aa6f2f2d5302e2988897736
                           .group:00000000 wm4.inttypes.h.24.8137491c6995c2cb5d25f9bab92d7f64
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.portmacro.h.56.a47bdd86bc36d334ca6056492e2d709f
                           .group:00000000 wm4.port.h.38.a8cf679bb58c5ad1b387e726c220530e
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c

UNDEFINED SYMBOLS
eMBRegDiscreteCB
prveMBError2Exception

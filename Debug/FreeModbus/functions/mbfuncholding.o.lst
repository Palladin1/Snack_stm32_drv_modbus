   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mbfuncholding.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.eMBFuncWriteHoldingRegister,"ax",%progbits
  19              		.align	2
  20              		.global	eMBFuncWriteHoldingRegister
  21              		.thumb
  22              		.thumb_func
  24              	eMBFuncWriteHoldingRegister:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/functions/mbfuncholding.c"
   1:../FreeModbus/functions/mbfuncholding.c **** /* 
   2:../FreeModbus/functions/mbfuncholding.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:../FreeModbus/functions/mbfuncholding.c ****  * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4:../FreeModbus/functions/mbfuncholding.c ****  * All rights reserved.
   5:../FreeModbus/functions/mbfuncholding.c ****  *
   6:../FreeModbus/functions/mbfuncholding.c ****  * Redistribution and use in source and binary forms, with or without
   7:../FreeModbus/functions/mbfuncholding.c ****  * modification, are permitted provided that the following conditions
   8:../FreeModbus/functions/mbfuncholding.c ****  * are met:
   9:../FreeModbus/functions/mbfuncholding.c ****  * 1. Redistributions of source code must retain the above copyright
  10:../FreeModbus/functions/mbfuncholding.c ****  *    notice, this list of conditions and the following disclaimer.
  11:../FreeModbus/functions/mbfuncholding.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:../FreeModbus/functions/mbfuncholding.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:../FreeModbus/functions/mbfuncholding.c ****  *    documentation and/or other materials provided with the distribution.
  14:../FreeModbus/functions/mbfuncholding.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:../FreeModbus/functions/mbfuncholding.c ****  *    derived from this software without specific prior written permission.
  16:../FreeModbus/functions/mbfuncholding.c ****  *
  17:../FreeModbus/functions/mbfuncholding.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:../FreeModbus/functions/mbfuncholding.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:../FreeModbus/functions/mbfuncholding.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:../FreeModbus/functions/mbfuncholding.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:../FreeModbus/functions/mbfuncholding.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:../FreeModbus/functions/mbfuncholding.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:../FreeModbus/functions/mbfuncholding.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:../FreeModbus/functions/mbfuncholding.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:../FreeModbus/functions/mbfuncholding.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:../FreeModbus/functions/mbfuncholding.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:../FreeModbus/functions/mbfuncholding.c ****  *
  28:../FreeModbus/functions/mbfuncholding.c ****  * File: $Id: mbfuncholding.c,v 1.12 2007/02/18 23:48:22 wolti Exp $
  29:../FreeModbus/functions/mbfuncholding.c ****  */
  30:../FreeModbus/functions/mbfuncholding.c **** 
  31:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- System includes ----------------------------------*/
  32:../FreeModbus/functions/mbfuncholding.c **** #include "stdlib.h"
  33:../FreeModbus/functions/mbfuncholding.c **** #include "string.h"
  34:../FreeModbus/functions/mbfuncholding.c **** 
  35:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Platform includes --------------------------------*/
  36:../FreeModbus/functions/mbfuncholding.c **** #include "port.h"
  37:../FreeModbus/functions/mbfuncholding.c **** 
  38:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:../FreeModbus/functions/mbfuncholding.c **** #include "mb.h"
  40:../FreeModbus/functions/mbfuncholding.c **** #include "mbframe.h"
  41:../FreeModbus/functions/mbfuncholding.c **** #include "mbproto.h"
  42:../FreeModbus/functions/mbfuncholding.c **** #include "mbconfig.h"
  43:../FreeModbus/functions/mbfuncholding.c **** 
  44:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Defines ------------------------------------------*/
  45:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_ADDR_OFF               ( MB_PDU_DATA_OFF + 0)
  46:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_REGCNT_OFF             ( MB_PDU_DATA_OFF + 2 )
  47:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_SIZE                   ( 4 )
  48:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READ_REGCNT_MAX             ( 0x007D )
  49:../FreeModbus/functions/mbfuncholding.c **** 
  50:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_ADDR_OFF              ( MB_PDU_DATA_OFF + 0)
  51:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_VALUE_OFF             ( MB_PDU_DATA_OFF + 2 )
  52:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_SIZE                  ( 4 )
  53:../FreeModbus/functions/mbfuncholding.c **** 
  54:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_ADDR_OFF          ( MB_PDU_DATA_OFF + 0 )
  55:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  56:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 4 )
  57:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_VALUES_OFF        ( MB_PDU_DATA_OFF + 5 )
  58:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_SIZE_MIN          ( 5 )
  59:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX        ( 0x0078 )
  60:../FreeModbus/functions/mbfuncholding.c **** 
  61:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_READ_ADDR_OFF     ( MB_PDU_DATA_OFF + 0 )
  62:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF   ( MB_PDU_DATA_OFF + 2 )
  63:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF    ( MB_PDU_DATA_OFF + 4 )
  64:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF  ( MB_PDU_DATA_OFF + 6 )
  65:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_BYTECNT_OFF       ( MB_PDU_DATA_OFF + 8 )
  66:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF  ( MB_PDU_DATA_OFF + 9 )
  67:../FreeModbus/functions/mbfuncholding.c **** #define MB_PDU_FUNC_READWRITE_SIZE_MIN          ( 9 )
  68:../FreeModbus/functions/mbfuncholding.c **** 
  69:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Static functions ---------------------------------*/
  70:../FreeModbus/functions/mbfuncholding.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  71:../FreeModbus/functions/mbfuncholding.c **** 
  72:../FreeModbus/functions/mbfuncholding.c **** /* ----------------------- Start implementation -----------------------------*/
  73:../FreeModbus/functions/mbfuncholding.c **** 
  74:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
  75:../FreeModbus/functions/mbfuncholding.c **** 
  76:../FreeModbus/functions/mbfuncholding.c **** eMBException
  77:../FreeModbus/functions/mbfuncholding.c **** eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
  78:../FreeModbus/functions/mbfuncholding.c **** {
  27              		.loc 1 78 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 84B0     		sub	sp, sp, #16
  36              		.cfi_def_cfa_offset 24
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  79:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
  80:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
  41              		.loc 1 80 0
  42 000a 0023     		movs	r3, #0
  43 000c FB73     		strb	r3, [r7, #15]
  81:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
  82:../FreeModbus/functions/mbfuncholding.c **** 
  83:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
  44              		.loc 1 83 0
  45 000e 3B68     		ldr	r3, [r7]
  46 0010 1B88     		ldrh	r3, [r3]
  47 0012 052B     		cmp	r3, #5
  48 0014 23D1     		bne	.L2
  84:../FreeModbus/functions/mbfuncholding.c ****     {
  85:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
  49              		.loc 1 85 0
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 0133     		adds	r3, r3, #1
  52 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  53 001c 1B02     		lsls	r3, r3, #8
  54 001e BB81     		strh	r3, [r7, #12]	@ movhi
  86:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
  55              		.loc 1 86 0
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 0233     		adds	r3, r3, #2
  58 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59 0026 1A46     		mov	r2, r3
  60 0028 BB89     		ldrh	r3, [r7, #12]	@ movhi
  61 002a 1343     		orrs	r3, r3, r2
  62 002c BB81     		strh	r3, [r7, #12]	@ movhi
  87:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
  63              		.loc 1 87 0
  64 002e BB89     		ldrh	r3, [r7, #12]
  65 0030 0133     		adds	r3, r3, #1
  66 0032 BB81     		strh	r3, [r7, #12]	@ movhi
  88:../FreeModbus/functions/mbfuncholding.c **** 
  89:../FreeModbus/functions/mbfuncholding.c ****         /* Make callback to update the value. */
  90:../FreeModbus/functions/mbfuncholding.c ****         eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
  67              		.loc 1 90 0
  68 0034 7B68     		ldr	r3, [r7, #4]
  69 0036 DA1C     		adds	r2, r3, #3
  70 0038 BB89     		ldrh	r3, [r7, #12]
  71 003a 1046     		mov	r0, r2
  72 003c 1946     		mov	r1, r3
  73 003e 0122     		movs	r2, #1
  74 0040 0123     		movs	r3, #1
  75 0042 FFF7FEFF 		bl	eMBRegHoldingCB
  76 0046 0346     		mov	r3, r0
  77 0048 FB72     		strb	r3, [r7, #11]
  91:../FreeModbus/functions/mbfuncholding.c ****                                       usRegAddress, 1, MB_REG_WRITE );
  92:../FreeModbus/functions/mbfuncholding.c **** 
  93:../FreeModbus/functions/mbfuncholding.c ****         /* If an error occured convert it into a Modbus exception. */
  94:../FreeModbus/functions/mbfuncholding.c ****         if( eRegStatus != MB_ENOERR )
  78              		.loc 1 94 0
  79 004a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
  80 004c 002B     		cmp	r3, #0
  81 004e 08D0     		beq	.L4
  95:../FreeModbus/functions/mbfuncholding.c ****         {
  96:../FreeModbus/functions/mbfuncholding.c ****             eStatus = prveMBError2Exception( eRegStatus );
  82              		.loc 1 96 0
  83 0050 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
  84 0052 1846     		mov	r0, r3
  85 0054 FFF7FEFF 		bl	prveMBError2Exception
  86 0058 0346     		mov	r3, r0
  87 005a FB73     		strb	r3, [r7, #15]
  88 005c 01E0     		b	.L4
  89              	.L2:
  97:../FreeModbus/functions/mbfuncholding.c ****         }
  98:../FreeModbus/functions/mbfuncholding.c ****     }
  99:../FreeModbus/functions/mbfuncholding.c ****     else
 100:../FreeModbus/functions/mbfuncholding.c ****     {
 101:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 102:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
  90              		.loc 1 102 0
  91 005e 0323     		movs	r3, #3
  92 0060 FB73     		strb	r3, [r7, #15]
  93              	.L4:
 103:../FreeModbus/functions/mbfuncholding.c ****     }
 104:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
  94              		.loc 1 104 0
  95 0062 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 105:../FreeModbus/functions/mbfuncholding.c **** }
  96              		.loc 1 105 0
  97 0064 1846     		mov	r0, r3
  98 0066 1037     		adds	r7, r7, #16
  99 0068 BD46     		mov	sp, r7
 100              		@ sp needed
 101 006a 80BD     		pop	{r7, pc}
 102              		.cfi_endproc
 103              	.LFE29:
 105              		.section	.text.eMBFuncWriteMultipleHoldingRegister,"ax",%progbits
 106              		.align	2
 107              		.global	eMBFuncWriteMultipleHoldingRegister
 108              		.thumb
 109              		.thumb_func
 111              	eMBFuncWriteMultipleHoldingRegister:
 112              	.LFB30:
 106:../FreeModbus/functions/mbfuncholding.c **** #endif
 107:../FreeModbus/functions/mbfuncholding.c **** 
 108:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 109:../FreeModbus/functions/mbfuncholding.c **** eMBException
 110:../FreeModbus/functions/mbfuncholding.c **** eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 111:../FreeModbus/functions/mbfuncholding.c **** {
 113              		.loc 1 111 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 16
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117 0000 80B5     		push	{r7, lr}
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 7, -8
 120              		.cfi_offset 14, -4
 121 0002 84B0     		sub	sp, sp, #16
 122              		.cfi_def_cfa_offset 24
 123 0004 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
 125 0006 7860     		str	r0, [r7, #4]
 126 0008 3960     		str	r1, [r7]
 112:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
 113:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegCount;
 114:../FreeModbus/functions/mbfuncholding.c ****     UCHAR           ucRegByteCount;
 115:../FreeModbus/functions/mbfuncholding.c **** 
 116:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 127              		.loc 1 116 0
 128 000a 0023     		movs	r3, #0
 129 000c FB73     		strb	r3, [r7, #15]
 117:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 118:../FreeModbus/functions/mbfuncholding.c **** 
 119:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 130              		.loc 1 119 0
 131 000e 3B68     		ldr	r3, [r7]
 132 0010 1B88     		ldrh	r3, [r3]
 133 0012 052B     		cmp	r3, #5
 134 0014 48D9     		bls	.L7
 120:../FreeModbus/functions/mbfuncholding.c ****     {
 121:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 135              		.loc 1 121 0
 136 0016 7B68     		ldr	r3, [r7, #4]
 137 0018 0133     		adds	r3, r3, #1
 138 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139 001c 1B02     		lsls	r3, r3, #8
 140 001e BB81     		strh	r3, [r7, #12]	@ movhi
 122:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 141              		.loc 1 122 0
 142 0020 7B68     		ldr	r3, [r7, #4]
 143 0022 0233     		adds	r3, r3, #2
 144 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 145 0026 1A46     		mov	r2, r3
 146 0028 BB89     		ldrh	r3, [r7, #12]	@ movhi
 147 002a 1343     		orrs	r3, r3, r2
 148 002c BB81     		strh	r3, [r7, #12]	@ movhi
 123:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
 149              		.loc 1 123 0
 150 002e BB89     		ldrh	r3, [r7, #12]
 151 0030 0133     		adds	r3, r3, #1
 152 0032 BB81     		strh	r3, [r7, #12]	@ movhi
 124:../FreeModbus/functions/mbfuncholding.c **** 
 125:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 153              		.loc 1 125 0
 154 0034 7B68     		ldr	r3, [r7, #4]
 155 0036 0333     		adds	r3, r3, #3
 156 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 157 003a 1B02     		lsls	r3, r3, #8
 158 003c 7B81     		strh	r3, [r7, #10]	@ movhi
 126:../FreeModbus/functions/mbfuncholding.c ****         usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 159              		.loc 1 126 0
 160 003e 7B68     		ldr	r3, [r7, #4]
 161 0040 0433     		adds	r3, r3, #4
 162 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 163 0044 1A46     		mov	r2, r3
 164 0046 7B89     		ldrh	r3, [r7, #10]	@ movhi
 165 0048 1343     		orrs	r3, r3, r2
 166 004a 7B81     		strh	r3, [r7, #10]	@ movhi
 127:../FreeModbus/functions/mbfuncholding.c **** 
 128:../FreeModbus/functions/mbfuncholding.c ****         ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 167              		.loc 1 128 0
 168 004c 7B68     		ldr	r3, [r7, #4]
 169 004e 5B79     		ldrb	r3, [r3, #5]
 170 0050 7B72     		strb	r3, [r7, #9]
 129:../FreeModbus/functions/mbfuncholding.c **** 
 130:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegCount >= 1 ) &&
 171              		.loc 1 130 0
 172 0052 7B89     		ldrh	r3, [r7, #10]
 173 0054 002B     		cmp	r3, #0
 174 0056 23D0     		beq	.L8
 175              		.loc 1 130 0 is_stmt 0 discriminator 1
 176 0058 7B89     		ldrh	r3, [r7, #10]
 177 005a 782B     		cmp	r3, #120
 178 005c 20D8     		bhi	.L8
 131:../FreeModbus/functions/mbfuncholding.c ****             ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 132:../FreeModbus/functions/mbfuncholding.c ****             ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 179              		.loc 1 132 0 is_stmt 1
 180 005e 7B89     		ldrh	r3, [r7, #10]	@ movhi
 181 0060 DBB2     		uxtb	r3, r3
 182 0062 5B00     		lsls	r3, r3, #1
 183 0064 DBB2     		uxtb	r3, r3
 131:../FreeModbus/functions/mbfuncholding.c ****             ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 184              		.loc 1 131 0
 185 0066 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 186 0068 9A42     		cmp	r2, r3
 187 006a 19D1     		bne	.L8
 133:../FreeModbus/functions/mbfuncholding.c ****         {
 134:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to update the register values. */
 135:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus =
 136:../FreeModbus/functions/mbfuncholding.c ****                 eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 188              		.loc 1 136 0
 189 006c 7B68     		ldr	r3, [r7, #4]
 190 006e 991D     		adds	r1, r3, #6
 135:../FreeModbus/functions/mbfuncholding.c ****                 eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 191              		.loc 1 135 0
 192 0070 BA89     		ldrh	r2, [r7, #12]
 193 0072 7B89     		ldrh	r3, [r7, #10]
 194 0074 0846     		mov	r0, r1
 195 0076 1146     		mov	r1, r2
 196 0078 1A46     		mov	r2, r3
 197 007a 0123     		movs	r3, #1
 198 007c FFF7FEFF 		bl	eMBRegHoldingCB
 199 0080 0346     		mov	r3, r0
 200 0082 3B72     		strb	r3, [r7, #8]
 137:../FreeModbus/functions/mbfuncholding.c ****                                  usRegAddress, usRegCount, MB_REG_WRITE );
 138:../FreeModbus/functions/mbfuncholding.c **** 
 139:../FreeModbus/functions/mbfuncholding.c ****             /* If an error occured convert it into a Modbus exception. */
 140:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 201              		.loc 1 140 0
 202 0084 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 203 0086 002B     		cmp	r3, #0
 204 0088 06D0     		beq	.L9
 141:../FreeModbus/functions/mbfuncholding.c ****             {
 142:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 205              		.loc 1 142 0
 206 008a 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 207 008c 1846     		mov	r0, r3
 208 008e FFF7FEFF 		bl	prveMBError2Exception
 209 0092 0346     		mov	r3, r0
 210 0094 FB73     		strb	r3, [r7, #15]
 140:../FreeModbus/functions/mbfuncholding.c ****             {
 211              		.loc 1 140 0
 212 0096 06E0     		b	.L11
 213              	.L9:
 143:../FreeModbus/functions/mbfuncholding.c ****             }
 144:../FreeModbus/functions/mbfuncholding.c ****             else
 145:../FreeModbus/functions/mbfuncholding.c ****             {
 146:../FreeModbus/functions/mbfuncholding.c ****                 /* The response contains the function code, the starting
 147:../FreeModbus/functions/mbfuncholding.c ****                  * address and the quantity of registers. We reuse the
 148:../FreeModbus/functions/mbfuncholding.c ****                  * old values in the buffer because they are still valid.
 149:../FreeModbus/functions/mbfuncholding.c ****                  */
 150:../FreeModbus/functions/mbfuncholding.c ****                 *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 214              		.loc 1 150 0
 215 0098 3B68     		ldr	r3, [r7]
 216 009a 0522     		movs	r2, #5
 217 009c 1A80     		strh	r2, [r3]	@ movhi
 140:../FreeModbus/functions/mbfuncholding.c ****             {
 218              		.loc 1 140 0
 219 009e 02E0     		b	.L11
 220              	.L8:
 151:../FreeModbus/functions/mbfuncholding.c ****             }
 152:../FreeModbus/functions/mbfuncholding.c ****         }
 153:../FreeModbus/functions/mbfuncholding.c ****         else
 154:../FreeModbus/functions/mbfuncholding.c ****         {
 155:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 221              		.loc 1 155 0
 222 00a0 0323     		movs	r3, #3
 223 00a2 FB73     		strb	r3, [r7, #15]
 224 00a4 02E0     		b	.L12
 225              	.L11:
 226 00a6 01E0     		b	.L12
 227              	.L7:
 156:../FreeModbus/functions/mbfuncholding.c ****         }
 157:../FreeModbus/functions/mbfuncholding.c ****     }
 158:../FreeModbus/functions/mbfuncholding.c ****     else
 159:../FreeModbus/functions/mbfuncholding.c ****     {
 160:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 161:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 228              		.loc 1 161 0
 229 00a8 0323     		movs	r3, #3
 230 00aa FB73     		strb	r3, [r7, #15]
 231              	.L12:
 162:../FreeModbus/functions/mbfuncholding.c ****     }
 163:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 232              		.loc 1 163 0
 233 00ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 164:../FreeModbus/functions/mbfuncholding.c **** }
 234              		.loc 1 164 0
 235 00ae 1846     		mov	r0, r3
 236 00b0 1037     		adds	r7, r7, #16
 237 00b2 BD46     		mov	sp, r7
 238              		@ sp needed
 239 00b4 80BD     		pop	{r7, pc}
 240              		.cfi_endproc
 241              	.LFE30:
 243 00b6 00BF     		.section	.text.eMBFuncReadHoldingRegister,"ax",%progbits
 244              		.align	2
 245              		.global	eMBFuncReadHoldingRegister
 246              		.thumb
 247              		.thumb_func
 249              	eMBFuncReadHoldingRegister:
 250              	.LFB31:
 165:../FreeModbus/functions/mbfuncholding.c **** #endif
 166:../FreeModbus/functions/mbfuncholding.c **** 
 167:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_READ_HOLDING_ENABLED > 0
 168:../FreeModbus/functions/mbfuncholding.c **** 
 169:../FreeModbus/functions/mbfuncholding.c **** eMBException
 170:../FreeModbus/functions/mbfuncholding.c **** eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 171:../FreeModbus/functions/mbfuncholding.c **** {
 251              		.loc 1 171 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 24
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255 0000 80B5     		push	{r7, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 86B0     		sub	sp, sp, #24
 260              		.cfi_def_cfa_offset 32
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 264 0008 3960     		str	r1, [r7]
 172:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegAddress;
 173:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegCount;
 174:../FreeModbus/functions/mbfuncholding.c ****     UCHAR          *pucFrameCur;
 175:../FreeModbus/functions/mbfuncholding.c **** 
 176:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 265              		.loc 1 176 0
 266 000a 0023     		movs	r3, #0
 267 000c FB75     		strb	r3, [r7, #23]
 177:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 178:../FreeModbus/functions/mbfuncholding.c **** 
 179:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 268              		.loc 1 179 0
 269 000e 3B68     		ldr	r3, [r7]
 270 0010 1B88     		ldrh	r3, [r3]
 271 0012 052B     		cmp	r3, #5
 272 0014 5DD1     		bne	.L15
 180:../FreeModbus/functions/mbfuncholding.c ****     {
 181:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 273              		.loc 1 181 0
 274 0016 7B68     		ldr	r3, [r7, #4]
 275 0018 0133     		adds	r3, r3, #1
 276 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277 001c 1B02     		lsls	r3, r3, #8
 278 001e BB82     		strh	r3, [r7, #20]	@ movhi
 182:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 279              		.loc 1 182 0
 280 0020 7B68     		ldr	r3, [r7, #4]
 281 0022 0233     		adds	r3, r3, #2
 282 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 283 0026 1A46     		mov	r2, r3
 284 0028 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 285 002a 1343     		orrs	r3, r3, r2
 286 002c BB82     		strh	r3, [r7, #20]	@ movhi
 183:../FreeModbus/functions/mbfuncholding.c ****         usRegAddress++;
 287              		.loc 1 183 0
 288 002e BB8A     		ldrh	r3, [r7, #20]
 289 0030 0133     		adds	r3, r3, #1
 290 0032 BB82     		strh	r3, [r7, #20]	@ movhi
 184:../FreeModbus/functions/mbfuncholding.c **** 
 185:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 291              		.loc 1 185 0
 292 0034 7B68     		ldr	r3, [r7, #4]
 293 0036 0333     		adds	r3, r3, #3
 294 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 295 003a 1B02     		lsls	r3, r3, #8
 296 003c 7B82     		strh	r3, [r7, #18]	@ movhi
 186:../FreeModbus/functions/mbfuncholding.c ****         usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 297              		.loc 1 186 0
 298 003e 7B68     		ldr	r3, [r7, #4]
 299 0040 0433     		adds	r3, r3, #4
 300 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 301 0044 7B82     		strh	r3, [r7, #18]	@ movhi
 187:../FreeModbus/functions/mbfuncholding.c **** 
 188:../FreeModbus/functions/mbfuncholding.c ****         /* Check if the number of registers to read is valid. If not
 189:../FreeModbus/functions/mbfuncholding.c ****          * return Modbus illegal data value exception. 
 190:../FreeModbus/functions/mbfuncholding.c ****          */
 191:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 302              		.loc 1 191 0
 303 0046 7B8A     		ldrh	r3, [r7, #18]
 304 0048 002B     		cmp	r3, #0
 305 004a 3ED0     		beq	.L16
 306              		.loc 1 191 0 is_stmt 0 discriminator 1
 307 004c 7B8A     		ldrh	r3, [r7, #18]
 308 004e 7D2B     		cmp	r3, #125
 309 0050 3BD8     		bhi	.L16
 192:../FreeModbus/functions/mbfuncholding.c ****         {
 193:../FreeModbus/functions/mbfuncholding.c ****             /* Set the current PDU data pointer to the beginning. */
 194:../FreeModbus/functions/mbfuncholding.c ****             pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 310              		.loc 1 194 0 is_stmt 1
 311 0052 7B68     		ldr	r3, [r7, #4]
 312 0054 FB60     		str	r3, [r7, #12]
 195:../FreeModbus/functions/mbfuncholding.c ****             *usLen = MB_PDU_FUNC_OFF;
 313              		.loc 1 195 0
 314 0056 3B68     		ldr	r3, [r7]
 315 0058 0022     		movs	r2, #0
 316 005a 1A80     		strh	r2, [r3]	@ movhi
 196:../FreeModbus/functions/mbfuncholding.c **** 
 197:../FreeModbus/functions/mbfuncholding.c ****             /* First byte contains the function code. */
 198:../FreeModbus/functions/mbfuncholding.c ****             *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 317              		.loc 1 198 0
 318 005c FB68     		ldr	r3, [r7, #12]
 319 005e 5A1C     		adds	r2, r3, #1
 320 0060 FA60     		str	r2, [r7, #12]
 321 0062 0322     		movs	r2, #3
 322 0064 1A70     		strb	r2, [r3]
 199:../FreeModbus/functions/mbfuncholding.c ****             *usLen += 1;
 323              		.loc 1 199 0
 324 0066 3B68     		ldr	r3, [r7]
 325 0068 1B88     		ldrh	r3, [r3]
 326 006a 0133     		adds	r3, r3, #1
 327 006c 9AB2     		uxth	r2, r3
 328 006e 3B68     		ldr	r3, [r7]
 329 0070 1A80     		strh	r2, [r3]	@ movhi
 200:../FreeModbus/functions/mbfuncholding.c **** 
 201:../FreeModbus/functions/mbfuncholding.c ****             /* Second byte in the response contain the number of bytes. */
 202:../FreeModbus/functions/mbfuncholding.c ****             *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 330              		.loc 1 202 0
 331 0072 FB68     		ldr	r3, [r7, #12]
 332 0074 5A1C     		adds	r2, r3, #1
 333 0076 FA60     		str	r2, [r7, #12]
 334 0078 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 335 007a D2B2     		uxtb	r2, r2
 336 007c 5200     		lsls	r2, r2, #1
 337 007e D2B2     		uxtb	r2, r2
 338 0080 1A70     		strb	r2, [r3]
 203:../FreeModbus/functions/mbfuncholding.c ****             *usLen += 1;
 339              		.loc 1 203 0
 340 0082 3B68     		ldr	r3, [r7]
 341 0084 1B88     		ldrh	r3, [r3]
 342 0086 0133     		adds	r3, r3, #1
 343 0088 9AB2     		uxth	r2, r3
 344 008a 3B68     		ldr	r3, [r7]
 345 008c 1A80     		strh	r2, [r3]	@ movhi
 204:../FreeModbus/functions/mbfuncholding.c **** 
 205:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to fill the buffer. */
 206:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 346              		.loc 1 206 0
 347 008e BA8A     		ldrh	r2, [r7, #20]
 348 0090 7B8A     		ldrh	r3, [r7, #18]
 349 0092 F868     		ldr	r0, [r7, #12]
 350 0094 1146     		mov	r1, r2
 351 0096 1A46     		mov	r2, r3
 352 0098 0023     		movs	r3, #0
 353 009a FFF7FEFF 		bl	eMBRegHoldingCB
 354 009e 0346     		mov	r3, r0
 355 00a0 FB72     		strb	r3, [r7, #11]
 207:../FreeModbus/functions/mbfuncholding.c ****             /* If an error occured convert it into a Modbus exception. */
 208:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 356              		.loc 1 208 0
 357 00a2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 358 00a4 002B     		cmp	r3, #0
 359 00a6 06D0     		beq	.L17
 209:../FreeModbus/functions/mbfuncholding.c ****             {
 210:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 360              		.loc 1 210 0
 361 00a8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 362 00aa 1846     		mov	r0, r3
 363 00ac FFF7FEFF 		bl	prveMBError2Exception
 364 00b0 0346     		mov	r3, r0
 365 00b2 FB75     		strb	r3, [r7, #23]
 208:../FreeModbus/functions/mbfuncholding.c ****             {
 366              		.loc 1 208 0
 367 00b4 0CE0     		b	.L19
 368              	.L17:
 211:../FreeModbus/functions/mbfuncholding.c ****             }
 212:../FreeModbus/functions/mbfuncholding.c ****             else
 213:../FreeModbus/functions/mbfuncholding.c ****             {
 214:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += usRegCount * 2;
 369              		.loc 1 214 0
 370 00b6 3B68     		ldr	r3, [r7]
 371 00b8 1A88     		ldrh	r2, [r3]
 372 00ba 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 373 00bc 5B00     		lsls	r3, r3, #1
 374 00be 9BB2     		uxth	r3, r3
 375 00c0 1344     		add	r3, r3, r2
 376 00c2 9AB2     		uxth	r2, r3
 377 00c4 3B68     		ldr	r3, [r7]
 378 00c6 1A80     		strh	r2, [r3]	@ movhi
 208:../FreeModbus/functions/mbfuncholding.c ****             {
 379              		.loc 1 208 0
 380 00c8 02E0     		b	.L19
 381              	.L16:
 215:../FreeModbus/functions/mbfuncholding.c ****             }
 216:../FreeModbus/functions/mbfuncholding.c ****         }
 217:../FreeModbus/functions/mbfuncholding.c ****         else
 218:../FreeModbus/functions/mbfuncholding.c ****         {
 219:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 382              		.loc 1 219 0
 383 00ca 0323     		movs	r3, #3
 384 00cc FB75     		strb	r3, [r7, #23]
 385 00ce 02E0     		b	.L20
 386              	.L19:
 387 00d0 01E0     		b	.L20
 388              	.L15:
 220:../FreeModbus/functions/mbfuncholding.c ****         }
 221:../FreeModbus/functions/mbfuncholding.c ****     }
 222:../FreeModbus/functions/mbfuncholding.c ****     else
 223:../FreeModbus/functions/mbfuncholding.c ****     {
 224:../FreeModbus/functions/mbfuncholding.c ****         /* Can't be a valid request because the length is incorrect. */
 225:../FreeModbus/functions/mbfuncholding.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 389              		.loc 1 225 0
 390 00d2 0323     		movs	r3, #3
 391 00d4 FB75     		strb	r3, [r7, #23]
 392              	.L20:
 226:../FreeModbus/functions/mbfuncholding.c ****     }
 227:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 393              		.loc 1 227 0
 394 00d6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 228:../FreeModbus/functions/mbfuncholding.c **** }
 395              		.loc 1 228 0
 396 00d8 1846     		mov	r0, r3
 397 00da 1837     		adds	r7, r7, #24
 398 00dc BD46     		mov	sp, r7
 399              		@ sp needed
 400 00de 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE31:
 404              		.section	.text.eMBFuncReadWriteMultipleHoldingRegister,"ax",%progbits
 405              		.align	2
 406              		.global	eMBFuncReadWriteMultipleHoldingRegister
 407              		.thumb
 408              		.thumb_func
 410              	eMBFuncReadWriteMultipleHoldingRegister:
 411              	.LFB32:
 229:../FreeModbus/functions/mbfuncholding.c **** 
 230:../FreeModbus/functions/mbfuncholding.c **** #endif
 231:../FreeModbus/functions/mbfuncholding.c **** 
 232:../FreeModbus/functions/mbfuncholding.c **** #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
 233:../FreeModbus/functions/mbfuncholding.c **** 
 234:../FreeModbus/functions/mbfuncholding.c **** eMBException
 235:../FreeModbus/functions/mbfuncholding.c **** eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
 236:../FreeModbus/functions/mbfuncholding.c **** {
 412              		.loc 1 236 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 24
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 86B0     		sub	sp, sp, #24
 421              		.cfi_def_cfa_offset 32
 422 0004 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 424 0006 7860     		str	r0, [r7, #4]
 425 0008 3960     		str	r1, [r7]
 237:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegReadAddress;
 238:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegReadCount;
 239:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegWriteAddress;
 240:../FreeModbus/functions/mbfuncholding.c ****     USHORT          usRegWriteCount;
 241:../FreeModbus/functions/mbfuncholding.c ****     UCHAR           ucRegWriteByteCount;
 242:../FreeModbus/functions/mbfuncholding.c ****     UCHAR          *pucFrameCur;
 243:../FreeModbus/functions/mbfuncholding.c **** 
 244:../FreeModbus/functions/mbfuncholding.c ****     eMBException    eStatus = MB_EX_NONE;
 426              		.loc 1 244 0
 427 000a 0023     		movs	r3, #0
 428 000c FB75     		strb	r3, [r7, #23]
 245:../FreeModbus/functions/mbfuncholding.c ****     eMBErrorCode    eRegStatus;
 246:../FreeModbus/functions/mbfuncholding.c **** 
 247:../FreeModbus/functions/mbfuncholding.c ****     if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 429              		.loc 1 247 0
 430 000e 3B68     		ldr	r3, [r7]
 431 0010 1B88     		ldrh	r3, [r3]
 432 0012 092B     		cmp	r3, #9
 433 0014 40F29B80 		bls	.L23
 248:../FreeModbus/functions/mbfuncholding.c ****     {
 249:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 434              		.loc 1 249 0
 435 0018 7B68     		ldr	r3, [r7, #4]
 436 001a 0133     		adds	r3, r3, #1
 437 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 438 001e 1B02     		lsls	r3, r3, #8
 439 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 250:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 440              		.loc 1 250 0
 441 0022 7B68     		ldr	r3, [r7, #4]
 442 0024 0233     		adds	r3, r3, #2
 443 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 444 0028 1A46     		mov	r2, r3
 445 002a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 446 002c 1343     		orrs	r3, r3, r2
 447 002e BB82     		strh	r3, [r7, #20]	@ movhi
 251:../FreeModbus/functions/mbfuncholding.c ****         usRegReadAddress++;
 448              		.loc 1 251 0
 449 0030 BB8A     		ldrh	r3, [r7, #20]
 450 0032 0133     		adds	r3, r3, #1
 451 0034 BB82     		strh	r3, [r7, #20]	@ movhi
 252:../FreeModbus/functions/mbfuncholding.c **** 
 253:../FreeModbus/functions/mbfuncholding.c ****         usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 452              		.loc 1 253 0
 453 0036 7B68     		ldr	r3, [r7, #4]
 454 0038 0333     		adds	r3, r3, #3
 455 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 456 003c 1B02     		lsls	r3, r3, #8
 457 003e 7B82     		strh	r3, [r7, #18]	@ movhi
 254:../FreeModbus/functions/mbfuncholding.c ****         usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 458              		.loc 1 254 0
 459 0040 7B68     		ldr	r3, [r7, #4]
 460 0042 0433     		adds	r3, r3, #4
 461 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 0046 1A46     		mov	r2, r3
 463 0048 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 464 004a 1343     		orrs	r3, r3, r2
 465 004c 7B82     		strh	r3, [r7, #18]	@ movhi
 255:../FreeModbus/functions/mbfuncholding.c **** 
 256:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 466              		.loc 1 256 0
 467 004e 7B68     		ldr	r3, [r7, #4]
 468 0050 0533     		adds	r3, r3, #5
 469 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 470 0054 1B02     		lsls	r3, r3, #8
 471 0056 3B82     		strh	r3, [r7, #16]	@ movhi
 257:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 472              		.loc 1 257 0
 473 0058 7B68     		ldr	r3, [r7, #4]
 474 005a 0633     		adds	r3, r3, #6
 475 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 476 005e 1A46     		mov	r2, r3
 477 0060 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 478 0062 1343     		orrs	r3, r3, r2
 479 0064 3B82     		strh	r3, [r7, #16]	@ movhi
 258:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteAddress++;
 480              		.loc 1 258 0
 481 0066 3B8A     		ldrh	r3, [r7, #16]
 482 0068 0133     		adds	r3, r3, #1
 483 006a 3B82     		strh	r3, [r7, #16]	@ movhi
 259:../FreeModbus/functions/mbfuncholding.c **** 
 260:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 484              		.loc 1 260 0
 485 006c 7B68     		ldr	r3, [r7, #4]
 486 006e 0733     		adds	r3, r3, #7
 487 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 488 0072 1B02     		lsls	r3, r3, #8
 489 0074 FB81     		strh	r3, [r7, #14]	@ movhi
 261:../FreeModbus/functions/mbfuncholding.c ****         usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 490              		.loc 1 261 0
 491 0076 7B68     		ldr	r3, [r7, #4]
 492 0078 0833     		adds	r3, r3, #8
 493 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 007c 1A46     		mov	r2, r3
 495 007e FB89     		ldrh	r3, [r7, #14]	@ movhi
 496 0080 1343     		orrs	r3, r3, r2
 497 0082 FB81     		strh	r3, [r7, #14]	@ movhi
 262:../FreeModbus/functions/mbfuncholding.c **** 
 263:../FreeModbus/functions/mbfuncholding.c ****         ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 498              		.loc 1 263 0
 499 0084 7B68     		ldr	r3, [r7, #4]
 500 0086 5B7A     		ldrb	r3, [r3, #9]
 501 0088 7B73     		strb	r3, [r7, #13]
 264:../FreeModbus/functions/mbfuncholding.c **** 
 265:../FreeModbus/functions/mbfuncholding.c ****         if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 502              		.loc 1 265 0
 503 008a 7B8A     		ldrh	r3, [r7, #18]
 504 008c 002B     		cmp	r3, #0
 505 008e 5CD0     		beq	.L24
 506              		.loc 1 265 0 is_stmt 0 discriminator 1
 507 0090 7B8A     		ldrh	r3, [r7, #18]
 508 0092 7D2B     		cmp	r3, #125
 509 0094 59D8     		bhi	.L24
 510 0096 FB89     		ldrh	r3, [r7, #14]
 511 0098 002B     		cmp	r3, #0
 512 009a 56D0     		beq	.L24
 266:../FreeModbus/functions/mbfuncholding.c ****             ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 513              		.loc 1 266 0 is_stmt 1
 514 009c FB89     		ldrh	r3, [r7, #14]
 515 009e 792B     		cmp	r3, #121
 516 00a0 53D8     		bhi	.L24
 267:../FreeModbus/functions/mbfuncholding.c ****             ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 517              		.loc 1 267 0 discriminator 1
 518 00a2 FB89     		ldrh	r3, [r7, #14]
 519 00a4 5A00     		lsls	r2, r3, #1
 520 00a6 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 266:../FreeModbus/functions/mbfuncholding.c ****             ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 521              		.loc 1 266 0 discriminator 1
 522 00a8 9A42     		cmp	r2, r3
 523 00aa 4ED1     		bne	.L24
 268:../FreeModbus/functions/mbfuncholding.c ****         {
 269:../FreeModbus/functions/mbfuncholding.c ****             /* Make callback to update the register values. */
 270:../FreeModbus/functions/mbfuncholding.c ****             eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 524              		.loc 1 270 0
 525 00ac 7B68     		ldr	r3, [r7, #4]
 526 00ae 03F10A01 		add	r1, r3, #10
 527 00b2 3A8A     		ldrh	r2, [r7, #16]
 528 00b4 FB89     		ldrh	r3, [r7, #14]
 529 00b6 0846     		mov	r0, r1
 530 00b8 1146     		mov	r1, r2
 531 00ba 1A46     		mov	r2, r3
 532 00bc 0123     		movs	r3, #1
 533 00be FFF7FEFF 		bl	eMBRegHoldingCB
 534 00c2 0346     		mov	r3, r0
 535 00c4 BB75     		strb	r3, [r7, #22]
 271:../FreeModbus/functions/mbfuncholding.c ****                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
 272:../FreeModbus/functions/mbfuncholding.c **** 
 273:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus == MB_ENOERR )
 536              		.loc 1 273 0
 537 00c6 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 538 00c8 002B     		cmp	r3, #0
 539 00ca 33D1     		bne	.L25
 274:../FreeModbus/functions/mbfuncholding.c ****             {
 275:../FreeModbus/functions/mbfuncholding.c ****                 /* Set the current PDU data pointer to the beginning. */
 276:../FreeModbus/functions/mbfuncholding.c ****                 pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 540              		.loc 1 276 0
 541 00cc 7B68     		ldr	r3, [r7, #4]
 542 00ce BB60     		str	r3, [r7, #8]
 277:../FreeModbus/functions/mbfuncholding.c ****                 *usLen = MB_PDU_FUNC_OFF;
 543              		.loc 1 277 0
 544 00d0 3B68     		ldr	r3, [r7]
 545 00d2 0022     		movs	r2, #0
 546 00d4 1A80     		strh	r2, [r3]	@ movhi
 278:../FreeModbus/functions/mbfuncholding.c **** 
 279:../FreeModbus/functions/mbfuncholding.c ****                 /* First byte contains the function code. */
 280:../FreeModbus/functions/mbfuncholding.c ****                 *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 547              		.loc 1 280 0
 548 00d6 BB68     		ldr	r3, [r7, #8]
 549 00d8 5A1C     		adds	r2, r3, #1
 550 00da BA60     		str	r2, [r7, #8]
 551 00dc 1722     		movs	r2, #23
 552 00de 1A70     		strb	r2, [r3]
 281:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += 1;
 553              		.loc 1 281 0
 554 00e0 3B68     		ldr	r3, [r7]
 555 00e2 1B88     		ldrh	r3, [r3]
 556 00e4 0133     		adds	r3, r3, #1
 557 00e6 9AB2     		uxth	r2, r3
 558 00e8 3B68     		ldr	r3, [r7]
 559 00ea 1A80     		strh	r2, [r3]	@ movhi
 282:../FreeModbus/functions/mbfuncholding.c **** 
 283:../FreeModbus/functions/mbfuncholding.c ****                 /* Second byte in the response contain the number of bytes. */
 284:../FreeModbus/functions/mbfuncholding.c ****                 *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 560              		.loc 1 284 0
 561 00ec BB68     		ldr	r3, [r7, #8]
 562 00ee 5A1C     		adds	r2, r3, #1
 563 00f0 BA60     		str	r2, [r7, #8]
 564 00f2 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 565 00f4 D2B2     		uxtb	r2, r2
 566 00f6 5200     		lsls	r2, r2, #1
 567 00f8 D2B2     		uxtb	r2, r2
 568 00fa 1A70     		strb	r2, [r3]
 285:../FreeModbus/functions/mbfuncholding.c ****                 *usLen += 1;
 569              		.loc 1 285 0
 570 00fc 3B68     		ldr	r3, [r7]
 571 00fe 1B88     		ldrh	r3, [r3]
 572 0100 0133     		adds	r3, r3, #1
 573 0102 9AB2     		uxth	r2, r3
 574 0104 3B68     		ldr	r3, [r7]
 575 0106 1A80     		strh	r2, [r3]	@ movhi
 286:../FreeModbus/functions/mbfuncholding.c **** 
 287:../FreeModbus/functions/mbfuncholding.c ****                 /* Make the read callback. */
 288:../FreeModbus/functions/mbfuncholding.c ****                 eRegStatus =
 576              		.loc 1 288 0
 577 0108 BA8A     		ldrh	r2, [r7, #20]
 578 010a 7B8A     		ldrh	r3, [r7, #18]
 579 010c B868     		ldr	r0, [r7, #8]
 580 010e 1146     		mov	r1, r2
 581 0110 1A46     		mov	r2, r3
 582 0112 0023     		movs	r3, #0
 583 0114 FFF7FEFF 		bl	eMBRegHoldingCB
 584 0118 0346     		mov	r3, r0
 585 011a BB75     		strb	r3, [r7, #22]
 289:../FreeModbus/functions/mbfuncholding.c ****                     eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 290:../FreeModbus/functions/mbfuncholding.c ****                 if( eRegStatus == MB_ENOERR )
 586              		.loc 1 290 0
 587 011c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 588 011e 002B     		cmp	r3, #0
 589 0120 08D1     		bne	.L25
 291:../FreeModbus/functions/mbfuncholding.c ****                 {
 292:../FreeModbus/functions/mbfuncholding.c ****                     *usLen += 2 * usRegReadCount;
 590              		.loc 1 292 0
 591 0122 3B68     		ldr	r3, [r7]
 592 0124 1A88     		ldrh	r2, [r3]
 593 0126 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 594 0128 5B00     		lsls	r3, r3, #1
 595 012a 9BB2     		uxth	r3, r3
 596 012c 1344     		add	r3, r3, r2
 597 012e 9AB2     		uxth	r2, r3
 598 0130 3B68     		ldr	r3, [r7]
 599 0132 1A80     		strh	r2, [r3]	@ movhi
 600              	.L25:
 293:../FreeModbus/functions/mbfuncholding.c ****                 }
 294:../FreeModbus/functions/mbfuncholding.c ****             }
 295:../FreeModbus/functions/mbfuncholding.c ****             if( eRegStatus != MB_ENOERR )
 601              		.loc 1 295 0
 602 0134 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 603 0136 002B     		cmp	r3, #0
 604 0138 06D0     		beq	.L26
 296:../FreeModbus/functions/mbfuncholding.c ****             {
 297:../FreeModbus/functions/mbfuncholding.c ****                 eStatus = prveMBError2Exception( eRegStatus );
 605              		.loc 1 297 0
 606 013a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 607 013c 1846     		mov	r0, r3
 608 013e FFF7FEFF 		bl	prveMBError2Exception
 609 0142 0346     		mov	r3, r0
 610 0144 FB75     		strb	r3, [r7, #23]
 295:../FreeModbus/functions/mbfuncholding.c ****             {
 611              		.loc 1 295 0
 612 0146 02E0     		b	.L23
 613              	.L26:
 295:../FreeModbus/functions/mbfuncholding.c ****             {
 614              		.loc 1 295 0 is_stmt 0 discriminator 1
 615 0148 01E0     		b	.L23
 616              	.L24:
 298:../FreeModbus/functions/mbfuncholding.c ****             }
 299:../FreeModbus/functions/mbfuncholding.c ****         }
 300:../FreeModbus/functions/mbfuncholding.c ****         else
 301:../FreeModbus/functions/mbfuncholding.c ****         {
 302:../FreeModbus/functions/mbfuncholding.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 617              		.loc 1 302 0 is_stmt 1
 618 014a 0323     		movs	r3, #3
 619 014c FB75     		strb	r3, [r7, #23]
 620              	.L23:
 303:../FreeModbus/functions/mbfuncholding.c ****         }
 304:../FreeModbus/functions/mbfuncholding.c ****     }
 305:../FreeModbus/functions/mbfuncholding.c ****     return eStatus;
 621              		.loc 1 305 0
 622 014e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 306:../FreeModbus/functions/mbfuncholding.c **** }
 623              		.loc 1 306 0
 624 0150 1846     		mov	r0, r3
 625 0152 1837     		adds	r7, r7, #24
 626 0154 BD46     		mov	sp, r7
 627              		@ sp needed
 628 0156 80BD     		pop	{r7, pc}
 629              		.cfi_endproc
 630              	.LFE32:
 632              		.text
 633              	.Letext0:
 634              		.file 2 "c:\\tools\\arm-none-eabi\\include\\stdint.h"
 635              		.file 3 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\stm32/port.h"
 636              		.file 4 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbproto.h"
 637              		.file 5 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mb.h"
 638              		.file 6 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\Libraries\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbfuncholding.c
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:19     .text.eMBFuncWriteHoldingRegister:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:24     .text.eMBFuncWriteHoldingRegister:00000000 eMBFuncWriteHoldingRegister
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:106    .text.eMBFuncWriteMultipleHoldingRegister:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:111    .text.eMBFuncWriteMultipleHoldingRegister:00000000 eMBFuncWriteMultipleHoldingRegister
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:244    .text.eMBFuncReadHoldingRegister:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:249    .text.eMBFuncReadHoldingRegister:00000000 eMBFuncReadHoldingRegister
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:405    .text.eMBFuncReadWriteMultipleHoldingRegister:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccyXEjVV.s:410    .text.eMBFuncReadWriteMultipleHoldingRegister:00000000 eMBFuncReadWriteMultipleHoldingRegister
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.98ffea2db242cfdb58f411f7407f2b59
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.18.8bab2fb43ac4e90235390733c30a4530
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.7091a050e07f1c4abd225630fe3d62f1
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stm32f10x_conf.h.2.f1a8c33f0a763aeef696fee38b2b2dbc
                           .group:00000000 wm4.mbconfig.h.33.2e295d4ff98bc723e2405a40490b5ddb
                           .group:00000000 wm4.assert.h.11.060c3dc511517628fd4f958fa9448dce
                           .group:00000000 wm4.inttypes.h.14.48280a9a5aa6f2f2d5302e2988897736
                           .group:00000000 wm4.inttypes.h.24.8137491c6995c2cb5d25f9bab92d7f64
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.portmacro.h.56.a47bdd86bc36d334ca6056492e2d709f
                           .group:00000000 wm4.port.h.38.a8cf679bb58c5ad1b387e726c220530e
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c

UNDEFINED SYMBOLS
eMBRegHoldingCB
prveMBError2Exception

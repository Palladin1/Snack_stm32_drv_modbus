   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"mbfuncdisc_m.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.eMBMasterReqReadDiscreteInputs,"ax",%progbits
  19              		.align	2
  20              		.global	eMBMasterReqReadDiscreteInputs
  21              		.thumb
  22              		.thumb_func
  24              	eMBMasterReqReadDiscreteInputs:
  25              	.LFB29:
  26              		.file 1 "../FreeModbus/functions/mbfuncdisc_m.c"
   1:../FreeModbus/functions/mbfuncdisc_m.c **** /*
   2:../FreeModbus/functions/mbfuncdisc_m.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:../FreeModbus/functions/mbfuncdisc_m.c ****  * Copyright (C) 2013 Armink <armink.ztl@gmail.com>
   4:../FreeModbus/functions/mbfuncdisc_m.c ****  * All rights reserved.
   5:../FreeModbus/functions/mbfuncdisc_m.c ****  *
   6:../FreeModbus/functions/mbfuncdisc_m.c ****  * Redistribution and use in source and binary forms, with or without
   7:../FreeModbus/functions/mbfuncdisc_m.c ****  * modification, are permitted provided that the following conditions
   8:../FreeModbus/functions/mbfuncdisc_m.c ****  * are met:
   9:../FreeModbus/functions/mbfuncdisc_m.c ****  * 1. Redistributions of source code must retain the above copyright
  10:../FreeModbus/functions/mbfuncdisc_m.c ****  *    notice, this list of conditions and the following disclaimer.
  11:../FreeModbus/functions/mbfuncdisc_m.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:../FreeModbus/functions/mbfuncdisc_m.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:../FreeModbus/functions/mbfuncdisc_m.c ****  *    documentation and/or other materials provided with the distribution.
  14:../FreeModbus/functions/mbfuncdisc_m.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:../FreeModbus/functions/mbfuncdisc_m.c ****  *    derived from this software without specific prior written permission.
  16:../FreeModbus/functions/mbfuncdisc_m.c ****  *
  17:../FreeModbus/functions/mbfuncdisc_m.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:../FreeModbus/functions/mbfuncdisc_m.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:../FreeModbus/functions/mbfuncdisc_m.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:../FreeModbus/functions/mbfuncdisc_m.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:../FreeModbus/functions/mbfuncdisc_m.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:../FreeModbus/functions/mbfuncdisc_m.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:../FreeModbus/functions/mbfuncdisc_m.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:../FreeModbus/functions/mbfuncdisc_m.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:../FreeModbus/functions/mbfuncdisc_m.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:../FreeModbus/functions/mbfuncdisc_m.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:../FreeModbus/functions/mbfuncdisc_m.c ****  *
  28:../FreeModbus/functions/mbfuncdisc_m.c ****  * File: $Id: mbfuncdisc_m.c,v 1.60 2013/10/15 8:48:20 Armink Add Master Functions  Exp $
  29:../FreeModbus/functions/mbfuncdisc_m.c ****  */
  30:../FreeModbus/functions/mbfuncdisc_m.c **** 
  31:../FreeModbus/functions/mbfuncdisc_m.c **** 
  32:../FreeModbus/functions/mbfuncdisc_m.c **** 
  33:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- System includes ----------------------------------*/
  34:../FreeModbus/functions/mbfuncdisc_m.c **** #include "stdlib.h"
  35:../FreeModbus/functions/mbfuncdisc_m.c **** #include "string.h"
  36:../FreeModbus/functions/mbfuncdisc_m.c **** 
  37:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- Platform includes --------------------------------*/
  38:../FreeModbus/functions/mbfuncdisc_m.c **** #include "port.h"
  39:../FreeModbus/functions/mbfuncdisc_m.c **** 
  40:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- Modbus includes ----------------------------------*/
  41:../FreeModbus/functions/mbfuncdisc_m.c **** #include "mb.h"
  42:../FreeModbus/functions/mbfuncdisc_m.c **** #include "mb_m.h"
  43:../FreeModbus/functions/mbfuncdisc_m.c **** #include "mbframe.h"
  44:../FreeModbus/functions/mbfuncdisc_m.c **** #include "mbproto.h"
  45:../FreeModbus/functions/mbfuncdisc_m.c **** #include "mbconfig.h"
  46:../FreeModbus/functions/mbfuncdisc_m.c **** 
  47:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- Defines ------------------------------------------*/
  48:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_REQ_READ_ADDR_OFF            ( MB_PDU_DATA_OFF + 0 )
  49:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_REQ_READ_DISCCNT_OFF         ( MB_PDU_DATA_OFF + 2 )
  50:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_REQ_READ_SIZE                ( 4 )
  51:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_FUNC_READ_DISCCNT_OFF        ( MB_PDU_DATA_OFF + 0 )
  52:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_FUNC_READ_VALUES_OFF         ( MB_PDU_DATA_OFF + 1 )
  53:../FreeModbus/functions/mbfuncdisc_m.c **** #define MB_PDU_FUNC_READ_SIZE_MIN           ( 1 )
  54:../FreeModbus/functions/mbfuncdisc_m.c **** 
  55:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- Static functions ---------------------------------*/
  56:../FreeModbus/functions/mbfuncdisc_m.c **** eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  57:../FreeModbus/functions/mbfuncdisc_m.c **** 
  58:../FreeModbus/functions/mbfuncdisc_m.c **** /* ----------------------- Start implementation -----------------------------*/
  59:../FreeModbus/functions/mbfuncdisc_m.c **** #if MB_MASTER_RTU_ENABLED > 0 || MB_MASTER_ASCII_ENABLED > 0
  60:../FreeModbus/functions/mbfuncdisc_m.c **** #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
  61:../FreeModbus/functions/mbfuncdisc_m.c **** 
  62:../FreeModbus/functions/mbfuncdisc_m.c **** /**
  63:../FreeModbus/functions/mbfuncdisc_m.c ****  * This function will request read discrete inputs.
  64:../FreeModbus/functions/mbfuncdisc_m.c ****  *
  65:../FreeModbus/functions/mbfuncdisc_m.c ****  * @param ucSndAddr salve address
  66:../FreeModbus/functions/mbfuncdisc_m.c ****  * @param usDiscreteAddr discrete start address
  67:../FreeModbus/functions/mbfuncdisc_m.c ****  * @param usNDiscreteIn discrete total number
  68:../FreeModbus/functions/mbfuncdisc_m.c ****  * @param lTimeOut timeout (-1 will waiting forever)
  69:../FreeModbus/functions/mbfuncdisc_m.c ****  *
  70:../FreeModbus/functions/mbfuncdisc_m.c ****  * @return error code
  71:../FreeModbus/functions/mbfuncdisc_m.c ****  */
  72:../FreeModbus/functions/mbfuncdisc_m.c **** eMBMasterReqErrCode
  73:../FreeModbus/functions/mbfuncdisc_m.c **** eMBMasterReqReadDiscreteInputs( UCHAR ucSndAddr, USHORT usDiscreteAddr, USHORT usNDiscreteIn, LONG 
  74:../FreeModbus/functions/mbfuncdisc_m.c **** {
  27              		.loc 1 74 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              		.cfi_def_cfa_offset 32
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7B60     		str	r3, [r7, #4]
  40 0008 0346     		mov	r3, r0
  41 000a FB73     		strb	r3, [r7, #15]
  42 000c 0B46     		mov	r3, r1	@ movhi
  43 000e BB81     		strh	r3, [r7, #12]	@ movhi
  44 0010 1346     		mov	r3, r2	@ movhi
  45 0012 7B81     		strh	r3, [r7, #10]	@ movhi
  75:../FreeModbus/functions/mbfuncdisc_m.c ****     UCHAR                 *ucMBFrame;
  76:../FreeModbus/functions/mbfuncdisc_m.c ****     eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
  46              		.loc 1 76 0
  47 0014 0023     		movs	r3, #0
  48 0016 FB75     		strb	r3, [r7, #23]
  77:../FreeModbus/functions/mbfuncdisc_m.c **** 
  78:../FreeModbus/functions/mbfuncdisc_m.c ****     if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
  49              		.loc 1 78 0
  50 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  51 001a 102B     		cmp	r3, #16
  52 001c 02D9     		bls	.L2
  53              		.loc 1 78 0 is_stmt 0 discriminator 1
  54 001e 0223     		movs	r3, #2
  55 0020 FB75     		strb	r3, [r7, #23]
  56 0022 36E0     		b	.L3
  57              	.L2:
  79:../FreeModbus/functions/mbfuncdisc_m.c ****     else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
  58              		.loc 1 79 0 is_stmt 1
  59 0024 7868     		ldr	r0, [r7, #4]
  60 0026 FFF7FEFF 		bl	xMBMasterRunResTake
  61 002a 0346     		mov	r3, r0
  62 002c 002B     		cmp	r3, #0
  63 002e 02D1     		bne	.L4
  64              		.loc 1 79 0 is_stmt 0 discriminator 1
  65 0030 0523     		movs	r3, #5
  66 0032 FB75     		strb	r3, [r7, #23]
  67 0034 2DE0     		b	.L3
  68              	.L4:
  80:../FreeModbus/functions/mbfuncdisc_m.c ****     else
  81:../FreeModbus/functions/mbfuncdisc_m.c ****     {
  82:../FreeModbus/functions/mbfuncdisc_m.c **** 		vMBMasterGetPDUSndBuf(&ucMBFrame);
  69              		.loc 1 82 0 is_stmt 1
  70 0036 07F11003 		add	r3, r7, #16
  71 003a 1846     		mov	r0, r3
  72 003c FFF7FEFF 		bl	vMBMasterGetPDUSndBuf
  83:../FreeModbus/functions/mbfuncdisc_m.c **** 		vMBMasterSetDestAddress(ucSndAddr);
  73              		.loc 1 83 0
  74 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  75 0042 1846     		mov	r0, r3
  76 0044 FFF7FEFF 		bl	vMBMasterSetDestAddress
  84:../FreeModbus/functions/mbfuncdisc_m.c **** 		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_DISCRETE_INPUTS;
  77              		.loc 1 84 0
  78 0048 3B69     		ldr	r3, [r7, #16]
  79 004a 0222     		movs	r2, #2
  80 004c 1A70     		strb	r2, [r3]
  85:../FreeModbus/functions/mbfuncdisc_m.c **** 		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usDiscreteAddr >> 8;
  81              		.loc 1 85 0
  82 004e 3B69     		ldr	r3, [r7, #16]
  83 0050 0133     		adds	r3, r3, #1
  84 0052 BA89     		ldrh	r2, [r7, #12]
  85 0054 120A     		lsrs	r2, r2, #8
  86 0056 92B2     		uxth	r2, r2
  87 0058 D2B2     		uxtb	r2, r2
  88 005a 1A70     		strb	r2, [r3]
  86:../FreeModbus/functions/mbfuncdisc_m.c **** 		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usDiscreteAddr;
  89              		.loc 1 86 0
  90 005c 3B69     		ldr	r3, [r7, #16]
  91 005e 0233     		adds	r3, r3, #2
  92 0060 BA89     		ldrh	r2, [r7, #12]	@ movhi
  93 0062 D2B2     		uxtb	r2, r2
  94 0064 1A70     		strb	r2, [r3]
  87:../FreeModbus/functions/mbfuncdisc_m.c **** 		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF ]    = usNDiscreteIn >> 8;
  95              		.loc 1 87 0
  96 0066 3B69     		ldr	r3, [r7, #16]
  97 0068 0333     		adds	r3, r3, #3
  98 006a 7A89     		ldrh	r2, [r7, #10]
  99 006c 120A     		lsrs	r2, r2, #8
 100 006e 92B2     		uxth	r2, r2
 101 0070 D2B2     		uxtb	r2, r2
 102 0072 1A70     		strb	r2, [r3]
  88:../FreeModbus/functions/mbfuncdisc_m.c **** 		ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] = usNDiscreteIn;
 103              		.loc 1 88 0
 104 0074 3B69     		ldr	r3, [r7, #16]
 105 0076 0433     		adds	r3, r3, #4
 106 0078 7A89     		ldrh	r2, [r7, #10]	@ movhi
 107 007a D2B2     		uxtb	r2, r2
 108 007c 1A70     		strb	r2, [r3]
  89:../FreeModbus/functions/mbfuncdisc_m.c **** 		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 109              		.loc 1 89 0
 110 007e 0520     		movs	r0, #5
 111 0080 FFF7FEFF 		bl	vMBMasterSetPDUSndLength
  90:../FreeModbus/functions/mbfuncdisc_m.c **** 		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 112              		.loc 1 90 0
 113 0084 0820     		movs	r0, #8
 114 0086 FFF7FEFF 		bl	xMBMasterPortEventPost
  91:../FreeModbus/functions/mbfuncdisc_m.c **** 		eErrStatus = eMBMasterWaitRequestFinish( );
 115              		.loc 1 91 0
 116 008a FFF7FEFF 		bl	eMBMasterWaitRequestFinish
 117 008e 0346     		mov	r3, r0
 118 0090 FB75     		strb	r3, [r7, #23]
 119              	.L3:
  92:../FreeModbus/functions/mbfuncdisc_m.c ****     }
  93:../FreeModbus/functions/mbfuncdisc_m.c ****     return eErrStatus;
 120              		.loc 1 93 0
 121 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  94:../FreeModbus/functions/mbfuncdisc_m.c **** }
 122              		.loc 1 94 0
 123 0094 1846     		mov	r0, r3
 124 0096 1837     		adds	r7, r7, #24
 125 0098 BD46     		mov	sp, r7
 126              		@ sp needed
 127 009a 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE29:
 131              		.section	.text.eMBMasterFuncReadDiscreteInputs,"ax",%progbits
 132              		.align	2
 133              		.global	eMBMasterFuncReadDiscreteInputs
 134              		.thumb
 135              		.thumb_func
 137              	eMBMasterFuncReadDiscreteInputs:
 138              	.LFB30:
  95:../FreeModbus/functions/mbfuncdisc_m.c **** 
  96:../FreeModbus/functions/mbfuncdisc_m.c **** eMBException
  97:../FreeModbus/functions/mbfuncdisc_m.c **** eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
  98:../FreeModbus/functions/mbfuncdisc_m.c **** {
 139              		.loc 1 98 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 24
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 80B5     		push	{r7, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 86B0     		sub	sp, sp, #24
 148              		.cfi_def_cfa_offset 32
 149 0004 00AF     		add	r7, sp, #0
 150              		.cfi_def_cfa_register 7
 151 0006 7860     		str	r0, [r7, #4]
 152 0008 3960     		str	r1, [r7]
  99:../FreeModbus/functions/mbfuncdisc_m.c ****     USHORT          usRegAddress;
 100:../FreeModbus/functions/mbfuncdisc_m.c ****     USHORT          usDiscreteCnt;
 101:../FreeModbus/functions/mbfuncdisc_m.c ****     UCHAR           ucNBytes;
 102:../FreeModbus/functions/mbfuncdisc_m.c ****     UCHAR          *ucMBFrame;
 103:../FreeModbus/functions/mbfuncdisc_m.c **** 
 104:../FreeModbus/functions/mbfuncdisc_m.c ****     eMBException    eStatus = MB_EX_NONE;
 153              		.loc 1 104 0
 154 000a 0023     		movs	r3, #0
 155 000c BB75     		strb	r3, [r7, #22]
 105:../FreeModbus/functions/mbfuncdisc_m.c ****     eMBErrorCode    eRegStatus;
 106:../FreeModbus/functions/mbfuncdisc_m.c **** 
 107:../FreeModbus/functions/mbfuncdisc_m.c ****     /* If this request is broadcast, and it's read mode. This request don't need execute. */
 108:../FreeModbus/functions/mbfuncdisc_m.c ****     if ( xMBMasterRequestIsBroadcast() )
 156              		.loc 1 108 0
 157 000e FFF7FEFF 		bl	xMBMasterRequestIsBroadcast
 158 0012 0346     		mov	r3, r0
 159 0014 002B     		cmp	r3, #0
 160 0016 02D0     		beq	.L7
 109:../FreeModbus/functions/mbfuncdisc_m.c ****     {
 110:../FreeModbus/functions/mbfuncdisc_m.c ****     	eStatus = MB_EX_NONE;
 161              		.loc 1 110 0
 162 0018 0023     		movs	r3, #0
 163 001a BB75     		strb	r3, [r7, #22]
 164 001c 58E0     		b	.L8
 165              	.L7:
 111:../FreeModbus/functions/mbfuncdisc_m.c ****     }
 112:../FreeModbus/functions/mbfuncdisc_m.c ****     else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 166              		.loc 1 112 0
 167 001e 3B68     		ldr	r3, [r7]
 168 0020 1B88     		ldrh	r3, [r3]
 169 0022 012B     		cmp	r3, #1
 170 0024 52D9     		bls	.L9
 113:../FreeModbus/functions/mbfuncdisc_m.c ****     {
 114:../FreeModbus/functions/mbfuncdisc_m.c ****     	vMBMasterGetPDUSndBuf(&ucMBFrame);
 171              		.loc 1 114 0
 172 0026 07F10C03 		add	r3, r7, #12
 173 002a 1846     		mov	r0, r3
 174 002c FFF7FEFF 		bl	vMBMasterGetPDUSndBuf
 115:../FreeModbus/functions/mbfuncdisc_m.c ****         usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 175              		.loc 1 115 0
 176 0030 FB68     		ldr	r3, [r7, #12]
 177 0032 0133     		adds	r3, r3, #1
 178 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 179 0036 1B02     		lsls	r3, r3, #8
 180 0038 BB82     		strh	r3, [r7, #20]	@ movhi
 116:../FreeModbus/functions/mbfuncdisc_m.c ****         usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 181              		.loc 1 116 0
 182 003a FB68     		ldr	r3, [r7, #12]
 183 003c 0233     		adds	r3, r3, #2
 184 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 185 0040 1A46     		mov	r2, r3
 186 0042 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 187 0044 1343     		orrs	r3, r3, r2
 188 0046 BB82     		strh	r3, [r7, #20]	@ movhi
 117:../FreeModbus/functions/mbfuncdisc_m.c ****         usRegAddress++;
 189              		.loc 1 117 0
 190 0048 BB8A     		ldrh	r3, [r7, #20]
 191 004a 0133     		adds	r3, r3, #1
 192 004c BB82     		strh	r3, [r7, #20]	@ movhi
 118:../FreeModbus/functions/mbfuncdisc_m.c **** 
 119:../FreeModbus/functions/mbfuncdisc_m.c ****         usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 193              		.loc 1 119 0
 194 004e FB68     		ldr	r3, [r7, #12]
 195 0050 0333     		adds	r3, r3, #3
 196 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 197 0054 1B02     		lsls	r3, r3, #8
 198 0056 7B82     		strh	r3, [r7, #18]	@ movhi
 120:../FreeModbus/functions/mbfuncdisc_m.c ****         usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 199              		.loc 1 120 0
 200 0058 FB68     		ldr	r3, [r7, #12]
 201 005a 0433     		adds	r3, r3, #4
 202 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 203 005e 1A46     		mov	r2, r3
 204 0060 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 205 0062 1343     		orrs	r3, r3, r2
 206 0064 7B82     		strh	r3, [r7, #18]	@ movhi
 121:../FreeModbus/functions/mbfuncdisc_m.c **** 
 122:../FreeModbus/functions/mbfuncdisc_m.c ****         /* Test if the quantity of coils is a multiple of 8. If not last
 123:../FreeModbus/functions/mbfuncdisc_m.c ****          * byte is only partially field with unused coils set to zero. */
 124:../FreeModbus/functions/mbfuncdisc_m.c ****         if( ( usDiscreteCnt & 0x0007 ) != 0 )
 207              		.loc 1 124 0
 208 0066 7B8A     		ldrh	r3, [r7, #18]
 209 0068 03F00703 		and	r3, r3, #7
 210 006c 002B     		cmp	r3, #0
 211 006e 06D0     		beq	.L10
 125:../FreeModbus/functions/mbfuncdisc_m.c ****         {
 126:../FreeModbus/functions/mbfuncdisc_m.c ****         	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 212              		.loc 1 126 0
 213 0070 7B8A     		ldrh	r3, [r7, #18]
 214 0072 DB08     		lsrs	r3, r3, #3
 215 0074 9BB2     		uxth	r3, r3
 216 0076 DBB2     		uxtb	r3, r3
 217 0078 0133     		adds	r3, r3, #1
 218 007a FB75     		strb	r3, [r7, #23]
 219 007c 03E0     		b	.L11
 220              	.L10:
 127:../FreeModbus/functions/mbfuncdisc_m.c ****         }
 128:../FreeModbus/functions/mbfuncdisc_m.c ****         else
 129:../FreeModbus/functions/mbfuncdisc_m.c ****         {
 130:../FreeModbus/functions/mbfuncdisc_m.c ****         	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 221              		.loc 1 130 0
 222 007e 7B8A     		ldrh	r3, [r7, #18]
 223 0080 DB08     		lsrs	r3, r3, #3
 224 0082 9BB2     		uxth	r3, r3
 225 0084 FB75     		strb	r3, [r7, #23]
 226              	.L11:
 131:../FreeModbus/functions/mbfuncdisc_m.c ****         }
 132:../FreeModbus/functions/mbfuncdisc_m.c **** 
 133:../FreeModbus/functions/mbfuncdisc_m.c ****         /* Check if the number of registers to read is valid. If not
 134:../FreeModbus/functions/mbfuncdisc_m.c ****          * return Modbus illegal data value exception. 
 135:../FreeModbus/functions/mbfuncdisc_m.c ****          */
 136:../FreeModbus/functions/mbfuncdisc_m.c **** 		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 227              		.loc 1 136 0
 228 0086 7B8A     		ldrh	r3, [r7, #18]
 229 0088 002B     		cmp	r3, #0
 230 008a 1BD0     		beq	.L12
 231              		.loc 1 136 0 is_stmt 0 discriminator 1
 232 008c 7B68     		ldr	r3, [r7, #4]
 233 008e 0133     		adds	r3, r3, #1
 234 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 235 0092 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 236 0094 9A42     		cmp	r2, r3
 237 0096 15D1     		bne	.L12
 137:../FreeModbus/functions/mbfuncdisc_m.c ****         {
 138:../FreeModbus/functions/mbfuncdisc_m.c **** 	       	/* Make callback to fill the buffer. */
 139:../FreeModbus/functions/mbfuncdisc_m.c **** 			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDis
 238              		.loc 1 139 0 is_stmt 1
 239 0098 7B68     		ldr	r3, [r7, #4]
 240 009a 991C     		adds	r1, r3, #2
 241 009c BA8A     		ldrh	r2, [r7, #20]
 242 009e 7B8A     		ldrh	r3, [r7, #18]
 243 00a0 0846     		mov	r0, r1
 244 00a2 1146     		mov	r1, r2
 245 00a4 1A46     		mov	r2, r3
 246 00a6 FFF7FEFF 		bl	eMBMasterRegDiscreteCB
 247 00aa 0346     		mov	r3, r0
 248 00ac 7B74     		strb	r3, [r7, #17]
 140:../FreeModbus/functions/mbfuncdisc_m.c **** 
 141:../FreeModbus/functions/mbfuncdisc_m.c **** 			/* If an error occured convert it into a Modbus exception. */
 142:../FreeModbus/functions/mbfuncdisc_m.c **** 			if( eRegStatus != MB_ENOERR )
 249              		.loc 1 142 0
 250 00ae 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 251 00b0 002B     		cmp	r3, #0
 252 00b2 06D0     		beq	.L13
 143:../FreeModbus/functions/mbfuncdisc_m.c **** 			{
 144:../FreeModbus/functions/mbfuncdisc_m.c **** 				eStatus = prveMBError2Exception( eRegStatus );
 253              		.loc 1 144 0
 254 00b4 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 255 00b6 1846     		mov	r0, r3
 256 00b8 FFF7FEFF 		bl	prveMBError2Exception
 257 00bc 0346     		mov	r3, r0
 258 00be BB75     		strb	r3, [r7, #22]
 142:../FreeModbus/functions/mbfuncdisc_m.c **** 			{
 259              		.loc 1 142 0
 260 00c0 03E0     		b	.L14
 261              	.L13:
 142:../FreeModbus/functions/mbfuncdisc_m.c **** 			{
 262              		.loc 1 142 0 is_stmt 0 discriminator 1
 263 00c2 02E0     		b	.L14
 264              	.L12:
 145:../FreeModbus/functions/mbfuncdisc_m.c **** 			}
 146:../FreeModbus/functions/mbfuncdisc_m.c ****         }
 147:../FreeModbus/functions/mbfuncdisc_m.c ****         else
 148:../FreeModbus/functions/mbfuncdisc_m.c ****         {
 149:../FreeModbus/functions/mbfuncdisc_m.c ****             eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 265              		.loc 1 149 0 is_stmt 1
 266 00c4 0323     		movs	r3, #3
 267 00c6 BB75     		strb	r3, [r7, #22]
 268 00c8 02E0     		b	.L8
 269              	.L14:
 270 00ca 01E0     		b	.L8
 271              	.L9:
 150:../FreeModbus/functions/mbfuncdisc_m.c ****         }
 151:../FreeModbus/functions/mbfuncdisc_m.c ****     }
 152:../FreeModbus/functions/mbfuncdisc_m.c ****     else
 153:../FreeModbus/functions/mbfuncdisc_m.c ****     {
 154:../FreeModbus/functions/mbfuncdisc_m.c ****         /* Can't be a valid read coil register request because the length
 155:../FreeModbus/functions/mbfuncdisc_m.c ****          * is incorrect. */
 156:../FreeModbus/functions/mbfuncdisc_m.c ****         eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 272              		.loc 1 156 0
 273 00cc 0323     		movs	r3, #3
 274 00ce BB75     		strb	r3, [r7, #22]
 275              	.L8:
 157:../FreeModbus/functions/mbfuncdisc_m.c ****     }
 158:../FreeModbus/functions/mbfuncdisc_m.c ****     return eStatus;
 276              		.loc 1 158 0
 277 00d0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 159:../FreeModbus/functions/mbfuncdisc_m.c **** }
 278              		.loc 1 159 0
 279 00d2 1846     		mov	r0, r3
 280 00d4 1837     		adds	r7, r7, #24
 281 00d6 BD46     		mov	sp, r7
 282              		@ sp needed
 283 00d8 80BD     		pop	{r7, pc}
 284              		.cfi_endproc
 285              	.LFE30:
 287 00da 00BF     		.text
 288              	.Letext0:
 289              		.file 2 "c:\\tools\\arm-none-eabi\\include\\stdint.h"
 290              		.file 3 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\stm32/port.h"
 291              		.file 4 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbport.h"
 292              		.file 5 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mbproto.h"
 293              		.file 6 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mb.h"
 294              		.file 7 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeModbus\\include/mb_m.h"
 295              		.file 8 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\Libraries\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mbfuncdisc_m.c
C:\Users\Alex\AppData\Local\Temp\ccl7zGqk.s:19     .text.eMBMasterReqReadDiscreteInputs:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccl7zGqk.s:24     .text.eMBMasterReqReadDiscreteInputs:00000000 eMBMasterReqReadDiscreteInputs
C:\Users\Alex\AppData\Local\Temp\ccl7zGqk.s:132    .text.eMBMasterFuncReadDiscreteInputs:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccl7zGqk.s:137    .text.eMBMasterFuncReadDiscreteInputs:00000000 eMBMasterFuncReadDiscreteInputs
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.98ffea2db242cfdb58f411f7407f2b59
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.18.8bab2fb43ac4e90235390733c30a4530
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.59.db8450f33c1f6150c0372fa1091a887a
                           .group:00000000 wm4.stddef.h.348.9a99de77b6ba3b4278b57e9cc6d6e349
                           .group:00000000 wm4.reent.h.16.567d760e6ae9ad7f917851a308bd7a57
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.7091a050e07f1c4abd225630fe3d62f1
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.efab90f4d89fbc41d6b3a5c5fb0d3d0f
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.stm32f10x_conf.h.2.f1a8c33f0a763aeef696fee38b2b2dbc
                           .group:00000000 wm4.mbconfig.h.33.2e295d4ff98bc723e2405a40490b5ddb
                           .group:00000000 wm4.assert.h.11.060c3dc511517628fd4f958fa9448dce
                           .group:00000000 wm4.inttypes.h.14.48280a9a5aa6f2f2d5302e2988897736
                           .group:00000000 wm4.inttypes.h.24.8137491c6995c2cb5d25f9bab92d7f64
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.119fe996be41b62fbd915b59177e39d1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.portmacro.h.56.a47bdd86bc36d334ca6056492e2d709f
                           .group:00000000 wm4.port.h.38.a8cf679bb58c5ad1b387e726c220530e
                           .group:00000000 wm4.mbproto.h.32.da85c2bdd9bdb84e975a92c999a4b490
                           .group:00000000 wm4.mb_m.h.32.f0c90bdd8de56a09521e2eefafb4f11f
                           .group:00000000 wm4.mbframe.h.32.cb3fc2a5a44fcaf8fe721dce49a4ba3c

UNDEFINED SYMBOLS
xMBMasterRunResTake
vMBMasterGetPDUSndBuf
vMBMasterSetDestAddress
vMBMasterSetPDUSndLength
xMBMasterPortEventPost
eMBMasterWaitRequestFinish
xMBMasterRequestIsBroadcast
eMBMasterRegDiscreteCB
prveMBError2Exception

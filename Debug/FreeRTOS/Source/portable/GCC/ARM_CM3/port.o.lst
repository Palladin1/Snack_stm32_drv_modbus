   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ulKernelPriority
  19              		.section	.rodata.ulKernelPriority,"a",%progbits
  20              		.align	2
  23              	ulKernelPriority:
  24 0000 F0000000 		.word	240
  25              		.section	.data.uxCriticalNesting,"aw",%progbits
  26              		.align	2
  29              	uxCriticalNesting:
  30 0000 AAAAAAAA 		.word	-1431655766
  31              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  32              		.align	2
  33              		.global	pxPortInitialiseStack
  34              		.thumb
  35              		.thumb_func
  37              	pxPortInitialiseStack:
  38              	.LFB0:
  39              		.file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	
   4:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
   5:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
   6:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
   7:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    available.                                                         *
  10:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  11:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  18:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  20:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  23:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  24:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  25:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
  26:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  27:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     more details. You should have received a copy of the GNU General Public
  37:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS WEB site.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  42:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     1 tab == 4 spaces!
  43:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  44:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     contact details.
  46:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  47:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     critical systems.
  49:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     licensing and training services.
  52:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** */
  53:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  54:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  55:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  56:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  57:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  58:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  59:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  60:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  61:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  64:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
  68:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  69:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the NVIC. */
  70:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  84:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  85:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** from inline assembler easier. */
  86:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  87:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  88:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  89:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** variable. */
  90:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  91:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  92:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
  93:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.
  94:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
  95:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvSetupTimerInterrupt( void );
  96:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  97:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
  98:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
  99:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 100:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 101:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 102:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 103:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 104:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 105:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 106:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 107:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 108:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 109:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 110:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 111:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 112:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 113:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 114:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 115:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
  40              		.loc 1 115 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 16
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44              		@ link register save eliminated.
  45 0000 80B4     		push	{r7}
  46              		.cfi_def_cfa_offset 4
  47              		.cfi_offset 7, -4
  48 0002 85B0     		sub	sp, sp, #20
  49              		.cfi_def_cfa_offset 24
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  52 0006 F860     		str	r0, [r7, #12]
  53 0008 B960     		str	r1, [r7, #8]
  54 000a 7A60     		str	r2, [r7, #4]
 116:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 117:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 118:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  55              		.loc 1 118 0
  56 000c FB68     		ldr	r3, [r7, #12]
  57 000e 043B     		subs	r3, r3, #4
  58 0010 FB60     		str	r3, [r7, #12]
 119:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  59              		.loc 1 119 0
  60 0012 FB68     		ldr	r3, [r7, #12]
  61 0014 4FF08072 		mov	r2, #16777216
  62 0018 1A60     		str	r2, [r3]
 120:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  63              		.loc 1 120 0
  64 001a FB68     		ldr	r3, [r7, #12]
  65 001c 043B     		subs	r3, r3, #4
  66 001e FB60     		str	r3, [r7, #12]
 121:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  67              		.loc 1 121 0
  68 0020 BA68     		ldr	r2, [r7, #8]
  69 0022 FB68     		ldr	r3, [r7, #12]
  70 0024 1A60     		str	r2, [r3]
 122:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
  71              		.loc 1 122 0
  72 0026 FB68     		ldr	r3, [r7, #12]
  73 0028 043B     		subs	r3, r3, #4
  74 002a FB60     		str	r3, [r7, #12]
 123:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = 0;	/* LR */
  75              		.loc 1 123 0
  76 002c FB68     		ldr	r3, [r7, #12]
  77 002e 0022     		movs	r2, #0
  78 0030 1A60     		str	r2, [r3]
 124:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  79              		.loc 1 124 0
  80 0032 FB68     		ldr	r3, [r7, #12]
  81 0034 143B     		subs	r3, r3, #20
  82 0036 FB60     		str	r3, [r7, #12]
 125:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  83              		.loc 1 125 0
  84 0038 7A68     		ldr	r2, [r7, #4]
  85 003a FB68     		ldr	r3, [r7, #12]
  86 003c 1A60     		str	r2, [r3]
 126:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  87              		.loc 1 126 0
  88 003e FB68     		ldr	r3, [r7, #12]
  89 0040 203B     		subs	r3, r3, #32
  90 0042 FB60     		str	r3, [r7, #12]
 127:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 128:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
  91              		.loc 1 128 0
  92 0044 FB68     		ldr	r3, [r7, #12]
 129:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
  93              		.loc 1 129 0
  94 0046 1846     		mov	r0, r3
  95 0048 1437     		adds	r7, r7, #20
  96 004a BD46     		mov	sp, r7
  97              		@ sp needed
  98 004c 5DF8047B 		ldr	r7, [sp], #4
  99 0050 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE0:
 103 0052 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 104              		.align	2
 105              		.global	SVC_Handler
 106              		.thumb
 107              		.thumb_func
 109              	SVC_Handler:
 110              	.LFB1:
 130:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 131:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 132:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 133:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 111              		.loc 1 133 0
 112              		.cfi_startproc
 113              		@ Naked Function: prologue and epilogue provided by programmer.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 134:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 116              		.loc 1 134 0
 117              	@ 134 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 118 0000 064B     			ldr	r3, pxCurrentTCBConst2		
 119 0002 1968     		ldr r1, [r3]					
 120 0004 0868     		ldr r0, [r1]					
 121 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 122 000a 80F30988 		msr psp, r0						
 123 000e 4FF00000 		mov r0, #0 						
 124 0012 80F31188 		msr	basepri, r0					
 125 0016 4EF00D0E 		orr r14, #0xd					
 126 001a 7047     		bx r14							
 127              										
 128              		.align 2						
 129 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 130              	
 131              	@ 0 "" 2
 135:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 136:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 137:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 138:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 139:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 141:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 142:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 143:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 144:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 145:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	.align 2						\n"
 146:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 147:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 148:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 132              		.loc 1 148 0
 133              		.thumb
 134              		.cfi_endproc
 135              	.LFE1:
 137              		.section	.text.vPortStartFirstTask,"ax",%progbits
 138              		.align	2
 139              		.global	vPortStartFirstTask
 140              		.thumb
 141              		.thumb_func
 143              	vPortStartFirstTask:
 144              	.LFB2:
 149:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 150:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 151:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void )
 152:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 145              		.loc 1 152 0
 146              		.cfi_startproc
 147              		@ Naked Function: prologue and epilogue provided by programmer.
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 153:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 150              		.loc 1 153 0
 151              	@ 153 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 152 0000 0348     		 ldr r0, =0xE000ED08 	
 153 0002 0068     	 ldr r0, [r0] 			
 154 0004 0068     	 ldr r0, [r0] 			
 155 0006 80F30888 	 msr msp, r0			
 156 000a 62B6     	 cpsie i				
 157 000c 00DF     	 svc 0					
 158 000e 00BF     	 nop					
 159              	
 160              	@ 0 "" 2
 154:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 155:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 156:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 157:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 158:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 160:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" nop					\n"
 161:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 162:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 161              		.loc 1 162 0
 162              		.thumb
 163              		.cfi_endproc
 164              	.LFE2:
 166              		.section	.text.xPortStartScheduler,"ax",%progbits
 167              		.align	2
 168              		.global	xPortStartScheduler
 169              		.thumb
 170              		.thumb_func
 172              	xPortStartScheduler:
 173              	.LFB3:
 163:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 164:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 165:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 166:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 167:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 168:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** portBASE_TYPE xPortStartScheduler( void )
 169:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 174              		.loc 1 169 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 80B5     		push	{r7, lr}
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 14, -4
 182 0002 00AF     		add	r7, sp, #0
 183              		.cfi_def_cfa_register 7
 170:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 171:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 184              		.loc 1 171 0
 185 0004 4EF62053 		movw	r3, #60704
 186 0008 CEF20003 		movt	r3, 57344
 187 000c 4EF62052 		movw	r2, #60704
 188 0010 CEF20002 		movt	r2, 57344
 189 0014 1268     		ldr	r2, [r2]
 190 0016 42F47002 		orr	r2, r2, #15728640
 191 001a 1A60     		str	r2, [r3]
 172:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 192              		.loc 1 172 0
 193 001c 4EF62053 		movw	r3, #60704
 194 0020 CEF20003 		movt	r3, 57344
 195 0024 4EF62052 		movw	r2, #60704
 196 0028 CEF20002 		movt	r2, 57344
 197 002c 1268     		ldr	r2, [r2]
 198 002e 42F07042 		orr	r2, r2, #-268435456
 199 0032 1A60     		str	r2, [r3]
 173:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 174:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 175:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	here already. */
 176:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	prvSetupTimerInterrupt();
 200              		.loc 1 176 0
 201 0034 FFF7FEFF 		bl	prvSetupTimerInterrupt
 177:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 178:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 179:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 202              		.loc 1 179 0
 203 0038 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 204 003c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 205 0040 0022     		movs	r2, #0
 206 0042 1A60     		str	r2, [r3]
 180:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 181:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 182:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	vPortStartFirstTask();
 207              		.loc 1 182 0
 208 0044 FFF7FEFF 		bl	vPortStartFirstTask
 183:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 184:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 185:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return 0;
 209              		.loc 1 185 0
 210 0048 0023     		movs	r3, #0
 186:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 211              		.loc 1 186 0
 212 004a 1846     		mov	r0, r3
 213 004c 80BD     		pop	{r7, pc}
 214              		.cfi_endproc
 215              	.LFE3:
 217 004e 00BF     		.section	.text.vPortEndScheduler,"ax",%progbits
 218              		.align	2
 219              		.global	vPortEndScheduler
 220              		.thumb
 221              		.thumb_func
 223              	vPortEndScheduler:
 224              	.LFB4:
 187:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 188:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 189:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 190:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 225              		.loc 1 190 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
 191:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 192:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	is nothing to return to.  */
 193:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 235              		.loc 1 193 0
 236 0004 BD46     		mov	sp, r7
 237              		@ sp needed
 238 0006 5DF8047B 		ldr	r7, [sp], #4
 239 000a 7047     		bx	lr
 240              		.cfi_endproc
 241              	.LFE4:
 243              		.section	.text.vPortYieldFromISR,"ax",%progbits
 244              		.align	2
 245              		.global	vPortYieldFromISR
 246              		.thumb
 247              		.thumb_func
 249              	vPortYieldFromISR:
 250              	.LFB5:
 194:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 195:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 196:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortYieldFromISR( void )
 197:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 251              		.loc 1 197 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256 0000 80B4     		push	{r7}
 257              		.cfi_def_cfa_offset 4
 258              		.cfi_offset 7, -4
 259 0002 00AF     		add	r7, sp, #0
 260              		.cfi_def_cfa_register 7
 198:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Set a PendSV to request a context switch. */
 199:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 261              		.loc 1 199 0
 262 0004 4EF60453 		movw	r3, #60676
 263 0008 CEF20003 		movt	r3, 57344
 264 000c 4FF08052 		mov	r2, #268435456
 265 0010 1A60     		str	r2, [r3]
 200:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 266              		.loc 1 200 0
 267 0012 BD46     		mov	sp, r7
 268              		@ sp needed
 269 0014 5DF8047B 		ldr	r7, [sp], #4
 270 0018 7047     		bx	lr
 271              		.cfi_endproc
 272              	.LFE5:
 274 001a 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 275              		.align	2
 276              		.global	vPortEnterCritical
 277              		.thumb
 278              		.thumb_func
 280              	vPortEnterCritical:
 281              	.LFB6:
 201:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 202:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 203:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 204:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 282              		.loc 1 204 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 0002 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 205:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 292              		.loc 1 205 0
 293              	@ 205 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 294 0004 4FF05000 			mov r0, #80								
 295 0008 80F31188 		msr basepri, r0							
 296              	
 297              	@ 0 "" 2
 206:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 298              		.loc 1 206 0
 299              		.thumb
 300 000c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 301 0010 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 302 0014 1B68     		ldr	r3, [r3]
 303 0016 5A1C     		adds	r2, r3, #1
 304 0018 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 305 001c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 306 0020 1A60     		str	r2, [r3]
 207:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 307              		.loc 1 207 0
 308 0022 BD46     		mov	sp, r7
 309              		@ sp needed
 310 0024 5DF8047B 		ldr	r7, [sp], #4
 311 0028 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE6:
 315 002a 00BF     		.section	.text.vPortExitCritical,"ax",%progbits
 316              		.align	2
 317              		.global	vPortExitCritical
 318              		.thumb
 319              		.thumb_func
 321              	vPortExitCritical:
 322              	.LFB7:
 208:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 209:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 210:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 211:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 323              		.loc 1 211 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328 0000 80B4     		push	{r7}
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0002 00AF     		add	r7, sp, #0
 332              		.cfi_def_cfa_register 7
 212:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 333              		.loc 1 212 0
 334 0004 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 335 0008 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 336 000c 1B68     		ldr	r3, [r3]
 337 000e 5A1E     		subs	r2, r3, #1
 338 0010 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 339 0014 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 340 0018 1A60     		str	r2, [r3]
 213:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 341              		.loc 1 213 0
 342 001a 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 343 001e C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 344 0022 1B68     		ldr	r3, [r3]
 345 0024 002B     		cmp	r3, #0
 346 0026 03D1     		bne	.L10
 214:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 215:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 347              		.loc 1 215 0
 348              	@ 215 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 349 0028 4FF00000 			mov r0, #0					
 350 002c 80F31188 		msr basepri, r0				
 351              	
 352              	@ 0 "" 2
 353              		.thumb
 354              	.L10:
 216:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 217:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 355              		.loc 1 217 0
 356 0030 BD46     		mov	sp, r7
 357              		@ sp needed
 358 0032 5DF8047B 		ldr	r7, [sp], #4
 359 0036 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE7:
 363              		.section	.text.PendSV_Handler,"ax",%progbits
 364              		.align	2
 365              		.global	PendSV_Handler
 366              		.thumb
 367              		.thumb_func
 369              	PendSV_Handler:
 370              	.LFB8:
 218:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 219:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 220:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 221:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 371              		.loc 1 221 0
 372              		.cfi_startproc
 373              		@ Naked Function: prologue and epilogue provided by programmer.
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 222:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 223:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 224:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 376              		.loc 1 224 0
 377              	@ 224 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 378 0000 EFF30980 			mrs r0, psp							
 379              											
 380 0004 0C4B     		ldr	r3, pxCurrentTCBConst			
 381 0006 1A68     		ldr	r2, [r3]						
 382              											
 383 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 384 000c 1060     		str r0, [r2]						
 385              											
 386 000e 2DE90840 		stmdb sp!, {r3, r14}				
 387 0012 4FF05000 		mov r0, #80							
 388 0016 80F31188 		msr basepri, r0						
 389 001a FFF7FEFF 		bl vTaskSwitchContext				
 390 001e 4FF00000 		mov r0, #0							
 391 0022 80F31188 		msr basepri, r0						
 392 0026 BDE80840 		ldmia sp!, {r3, r14}				
 393              											
 394 002a 1968     		ldr r1, [r3]						
 395 002c 0868     		ldr r0, [r1]						
 396 002e B0E8F00F 		ldmia r0!, {r4-r11}					
 397 0032 80F30988 		msr psp, r0							
 398 0036 7047     		bx r14								
 399              											
 400              		.align 2							
 401 0038 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 402              	
 403              	@ 0 "" 2
 225:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	(
 226:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 227:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 228:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 229:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 230:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 231:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 232:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 233:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 234:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 235:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 236:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 237:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 238:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 239:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 240:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 241:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 242:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 243:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 244:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 245:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 246:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 247:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 248:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	.align 2							\n"
 249:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 250:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 251:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	);
 252:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 404              		.loc 1 252 0
 405              		.thumb
 406              		.cfi_endproc
 407              	.LFE8:
 409              		.section	.text.SysTick_Handler,"ax",%progbits
 410              		.align	2
 411              		.global	SysTick_Handler
 412              		.thumb
 413              		.thumb_func
 415              	SysTick_Handler:
 416              	.LFB9:
 253:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 254:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 255:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 256:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 417              		.loc 1 256 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 8
 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421 0000 80B5     		push	{r7, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 0002 82B0     		sub	sp, sp, #8
 426              		.cfi_def_cfa_offset 16
 427 0004 00AF     		add	r7, sp, #0
 428              		.cfi_def_cfa_register 7
 257:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** unsigned long ulDummy;
 258:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 259:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* If using preemption, also force a context switch. */
 260:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#if configUSE_PREEMPTION == 1
 261:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 429              		.loc 1 261 0
 430 0006 4EF60453 		movw	r3, #60676
 431 000a CEF20003 		movt	r3, 57344
 432 000e 4FF08052 		mov	r2, #268435456
 433 0012 1A60     		str	r2, [r3]
 262:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#endif
 263:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 264:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 434              		.loc 1 264 0
 435 0014 0023     		movs	r3, #0
 436 0016 7B60     		str	r3, [r7, #4]
 437              	@ 264 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 438 0018 4FF05000 			mov r0, #80								
 439 001c 80F31188 		msr basepri, r0							
 440              	
 441              	@ 0 "" 2
 265:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 266:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		vTaskIncrementTick();
 442              		.loc 1 266 0
 443              		.thumb
 444 0020 FFF7FEFF 		bl	vTaskIncrementTick
 267:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 268:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 445              		.loc 1 268 0
 446              	@ 268 "../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 447 0024 4FF00000 			mov r0, #0					
 448 0028 80F31188 		msr basepri, r0				
 449              	
 450              	@ 0 "" 2
 269:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 451              		.loc 1 269 0
 452              		.thumb
 453 002c 0837     		adds	r7, r7, #8
 454 002e BD46     		mov	sp, r7
 455              		@ sp needed
 456 0030 80BD     		pop	{r7, pc}
 457              		.cfi_endproc
 458              	.LFE9:
 460 0032 00BF     		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
 461              		.align	2
 462              		.thumb
 463              		.thumb_func
 465              	prvSetupTimerInterrupt:
 466              	.LFB10:
 270:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 271:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 272:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 273:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 274:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * frequency.
 275:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 276:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void prvSetupTimerInterrupt( void )
 277:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 467              		.loc 1 277 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 7, -4
 475 0002 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
 278:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 279:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 477              		.loc 1 279 0
 478 0004 4EF21403 		movw	r3, #57364
 479 0008 CEF20003 		movt	r3, 57344
 480 000c 45F6BF52 		movw	r2, #23999
 481 0010 1A60     		str	r2, [r3]
 280:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 482              		.loc 1 280 0
 483 0012 4EF21003 		movw	r3, #57360
 484 0016 CEF20003 		movt	r3, 57344
 485 001a 0722     		movs	r2, #7
 486 001c 1A60     		str	r2, [r3]
 281:../FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 487              		.loc 1 281 0
 488 001e BD46     		mov	sp, r7
 489              		@ sp needed
 490 0020 5DF8047B 		ldr	r7, [sp], #4
 491 0024 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE10:
 495 0026 00BF     		.text
 496              	.Letext0:
 497              		.file 2 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeRTOS\\Source\\include/projdefs.h"
 498              		.file 3 "D:\\pall\\workspace\\Snack_stm32_drv_modbus\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/por
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:23     .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:20     .rodata.ulKernelPriority:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:26     .data.uxCriticalNesting:00000000 $d
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:29     .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:32     .text.pxPortInitialiseStack:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:37     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:104    .text.SVC_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:109    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:129    .text.SVC_Handler:0000001c pxCurrentTCBConst2
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:129    .text.SVC_Handler:0000001c $d
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:138    .text.vPortStartFirstTask:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:143    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:167    .text.xPortStartScheduler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:172    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:465    .text.prvSetupTimerInterrupt:00000000 prvSetupTimerInterrupt
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:218    .text.vPortEndScheduler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:223    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:244    .text.vPortYieldFromISR:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:249    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:275    .text.vPortEnterCritical:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:280    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:316    .text.vPortExitCritical:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:321    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:364    .text.PendSV_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:369    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:401    .text.PendSV_Handler:00000038 pxCurrentTCBConst
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:401    .text.PendSV_Handler:00000038 $d
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:410    .text.SysTick_Handler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:415    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:461    .text.prvSetupTimerInterrupt:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccgtLicc.s:166    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.98ffea2db242cfdb58f411f7407f2b59
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:00000000 wm4.FreeRTOSConfig.h.64.0af6644bda3c4312e69b231c06f0909a
                           .group:00000000 wm4.portmacro.h.56.a47bdd86bc36d334ca6056492e2d709f
                           .group:00000000 wm4.portable.h.311.02653c2286cc0addcb8e7b32211fdde5
                           .group:00000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:00000000 wm4.FreeRTOS.h.132.e7bb8eabd42aedb15fb3c1f00c9886e6
                           .group:00000000 wm4.list.h.84.e713c47e239b06424d7c93968625e34d
                           .group:00000000 wm4.task.h.73.4db227e33e5981749a1e912949d705ee

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
